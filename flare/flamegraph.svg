<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="28800" height="502" onload="init(evt)" viewBox="0 0 28800 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="28790" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="28790" y="485.00"> </text><svg id="frames" x="10" width="28780" total_samples="29600"><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (200 samples, 0.68%)</title><rect x="0.0000%" y="421" width="0.6757%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="200"/><text x="0.0104%" y="431.50">&lt;&amp;rayon::iter::par_bridge..</text></g><g><title>&lt;rayon::iter::filter_map::FilterMapFolder&lt;C,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (100 samples, 0.34%)</title><rect x="0.3378%" y="405" width="0.3378%" height="15" fill="rgb(217,0,24)" fg:x="100" fg:w="100"/><text x="0.3483%" y="415.50">&lt;rayon::ite..</text></g><g><title>&lt;rayon::iter::filter::FilterFolder&lt;C,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (100 samples, 0.34%)</title><rect x="0.3378%" y="389" width="0.3378%" height="15" fill="rgb(221,193,54)" fg:x="100" fg:w="100"/><text x="0.3483%" y="399.50">&lt;rayon::ite..</text></g><g><title>flare_internals::parse_program::{{closure}} (100 samples, 0.34%)</title><rect x="0.3378%" y="373" width="0.3378%" height="15" fill="rgb(248,212,6)" fg:x="100" fg:w="100"/><text x="0.3483%" y="383.50">flare_inter..</text></g><g><title>std::path::Path::extension (100 samples, 0.34%)</title><rect x="0.3378%" y="357" width="0.3378%" height="15" fill="rgb(208,68,35)" fg:x="100" fg:w="100"/><text x="0.3483%" y="367.50">std::path::..</text></g><g><title>core::option::Option&lt;T&gt;::map (100 samples, 0.34%)</title><rect x="0.3378%" y="341" width="0.3378%" height="15" fill="rgb(232,128,0)" fg:x="100" fg:w="100"/><text x="0.3483%" y="351.50">core::optio..</text></g><g><title>core::ops::function::FnOnce::call_once (100 samples, 0.34%)</title><rect x="0.3378%" y="325" width="0.3378%" height="15" fill="rgb(207,160,47)" fg:x="100" fg:w="100"/><text x="0.3483%" y="335.50">core::ops::..</text></g><g><title>std::path::rsplit_file_at_dot (100 samples, 0.34%)</title><rect x="0.3378%" y="309" width="0.3378%" height="15" fill="rgb(228,23,34)" fg:x="100" fg:w="100"/><text x="0.3483%" y="319.50">std::path::..</text></g><g><title>&lt;core::slice::iter::RSplitN&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.34%)</title><rect x="0.3378%" y="293" width="0.3378%" height="15" fill="rgb(218,30,26)" fg:x="100" fg:w="100"/><text x="0.3483%" y="303.50">&lt;core::slic..</text></g><g><title>&lt;core::slice::iter::GenericSplitN&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.34%)</title><rect x="0.3378%" y="277" width="0.3378%" height="15" fill="rgb(220,122,19)" fg:x="100" fg:w="100"/><text x="0.3483%" y="287.50">&lt;core::slic..</text></g><g><title>&lt;core::slice::iter::RSplit&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.34%)</title><rect x="0.3378%" y="261" width="0.3378%" height="15" fill="rgb(250,228,42)" fg:x="100" fg:w="100"/><text x="0.3483%" y="271.50">&lt;core::slic..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (100 samples, 0.34%)</title><rect x="0.3378%" y="245" width="0.3378%" height="15" fill="rgb(240,193,28)" fg:x="100" fg:w="100"/><text x="0.3483%" y="255.50">&lt;core::slic..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (100 samples, 0.34%)</title><rect x="0.3378%" y="229" width="0.3378%" height="15" fill="rgb(216,20,37)" fg:x="100" fg:w="100"/><text x="0.3483%" y="239.50">&lt;core::slic..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (100 samples, 0.34%)</title><rect x="0.3378%" y="213" width="0.3378%" height="15" fill="rgb(206,188,39)" fg:x="100" fg:w="100"/><text x="0.3483%" y="223.50">&lt;core::slic..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (100 samples, 0.34%)</title><rect x="0.3378%" y="197" width="0.3378%" height="15" fill="rgb(217,207,13)" fg:x="100" fg:w="100"/><text x="0.3483%" y="207.50">&lt;core::ptr:..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (200 samples, 0.68%)</title><rect x="0.6757%" y="421" width="0.6757%" height="15" fill="rgb(231,73,38)" fg:x="200" fg:w="200"/><text x="0.6861%" y="431.50">&lt;&amp;std::io::stdio::Stdout ..</text></g><g><title>std::io::Write::write_fmt (200 samples, 0.68%)</title><rect x="0.6757%" y="405" width="0.6757%" height="15" fill="rgb(225,20,46)" fg:x="200" fg:w="200"/><text x="0.6861%" y="415.50">std::io::Write::write_fmt</text></g><g><title>std::io::default_write_fmt (200 samples, 0.68%)</title><rect x="0.6757%" y="389" width="0.6757%" height="15" fill="rgb(210,31,41)" fg:x="200" fg:w="200"/><text x="0.6861%" y="399.50">std::io::default_write_fmt</text></g><g><title>core::fmt::write (200 samples, 0.68%)</title><rect x="0.6757%" y="373" width="0.6757%" height="15" fill="rgb(221,200,47)" fg:x="200" fg:w="200"/><text x="0.6861%" y="383.50">core::fmt::write</text></g><g><title>core::fmt::run (200 samples, 0.68%)</title><rect x="0.6757%" y="357" width="0.6757%" height="15" fill="rgb(226,26,5)" fg:x="200" fg:w="200"/><text x="0.6861%" y="367.50">core::fmt::run</text></g><g><title>core::fmt::rt::Argument::fmt (200 samples, 0.68%)</title><rect x="0.6757%" y="341" width="0.6757%" height="15" fill="rgb(249,33,26)" fg:x="200" fg:w="200"/><text x="0.6861%" y="351.50">core::fmt::rt::Argument::..</text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (200 samples, 0.68%)</title><rect x="0.6757%" y="325" width="0.6757%" height="15" fill="rgb(235,183,28)" fg:x="200" fg:w="200"/><text x="0.6861%" y="335.50">&lt;core::time::Duration as ..</text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (200 samples, 0.68%)</title><rect x="0.6757%" y="309" width="0.6757%" height="15" fill="rgb(221,5,38)" fg:x="200" fg:w="200"/><text x="0.6861%" y="319.50">&lt;core::time::Duration as ..</text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (200 samples, 0.68%)</title><rect x="0.6757%" y="293" width="0.6757%" height="15" fill="rgb(247,18,42)" fg:x="200" fg:w="200"/><text x="0.6861%" y="303.50">&lt;core::time::Duration as ..</text></g><g><title>core::fmt::Formatter::write_fmt (200 samples, 0.68%)</title><rect x="0.6757%" y="277" width="0.6757%" height="15" fill="rgb(241,131,45)" fg:x="200" fg:w="200"/><text x="0.6861%" y="287.50">core::fmt::Formatter::wri..</text></g><g><title>core::fmt::write (200 samples, 0.68%)</title><rect x="0.6757%" y="261" width="0.6757%" height="15" fill="rgb(249,31,29)" fg:x="200" fg:w="200"/><text x="0.6861%" y="271.50">core::fmt::write</text></g><g><title>core::fmt::run (100 samples, 0.34%)</title><rect x="1.0135%" y="245" width="0.3378%" height="15" fill="rgb(225,111,53)" fg:x="300" fg:w="100"/><text x="1.0239%" y="255.50">core::fmt::..</text></g><g><title>core::fmt::getcount (100 samples, 0.34%)</title><rect x="1.0135%" y="229" width="0.3378%" height="15" fill="rgb(238,160,17)" fg:x="300" fg:w="100"/><text x="1.0239%" y="239.50">core::fmt::..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (400 samples, 1.35%)</title><rect x="1.3514%" y="421" width="1.3514%" height="15" fill="rgb(214,148,48)" fg:x="400" fg:w="400"/><text x="1.3618%" y="431.50">&lt;T as core::slice::cmp::SliceContains&gt;::slice_contai..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (400 samples, 1.35%)</title><rect x="1.3514%" y="405" width="1.3514%" height="15" fill="rgb(232,36,49)" fg:x="400" fg:w="400"/><text x="1.3618%" y="415.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::i..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (200 samples, 0.68%)</title><rect x="2.0270%" y="389" width="0.6757%" height="15" fill="rgb(209,103,24)" fg:x="600" fg:w="200"/><text x="2.0374%" y="399.50">&lt;T as core::slice::cmp::S..</text></g><g><title>&lt;chumsky::error::RichPattern&lt;T&gt; as core::cmp::PartialEq&gt;::eq (200 samples, 0.68%)</title><rect x="2.0270%" y="373" width="0.6757%" height="15" fill="rgb(229,88,8)" fg:x="600" fg:w="200"/><text x="2.0374%" y="383.50">&lt;chumsky::error::RichPatt..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (100 samples, 0.34%)</title><rect x="2.7027%" y="421" width="0.3378%" height="15" fill="rgb(213,181,19)" fg:x="800" fg:w="100"/><text x="2.7131%" y="431.50">&lt;alloc::vec..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (100 samples, 0.34%)</title><rect x="2.7027%" y="405" width="0.3378%" height="15" fill="rgb(254,191,54)" fg:x="800" fg:w="100"/><text x="2.7131%" y="415.50">alloc::slic..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (100 samples, 0.34%)</title><rect x="2.7027%" y="389" width="0.3378%" height="15" fill="rgb(241,83,37)" fg:x="800" fg:w="100"/><text x="2.7131%" y="399.50">&lt;T as alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="2.7027%" y="373" width="0.3378%" height="15" fill="rgb(233,36,39)" fg:x="800" fg:w="100"/><text x="2.7131%" y="383.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="2.7027%" y="357" width="0.3378%" height="15" fill="rgb(226,3,54)" fg:x="800" fg:w="100"/><text x="2.7131%" y="367.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="2.7027%" y="341" width="0.3378%" height="15" fill="rgb(245,192,40)" fg:x="800" fg:w="100"/><text x="2.7131%" y="351.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (100 samples, 0.34%)</title><rect x="2.7027%" y="325" width="0.3378%" height="15" fill="rgb(238,167,29)" fg:x="800" fg:w="100"/><text x="2.7131%" y="335.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.34%)</title><rect x="2.7027%" y="309" width="0.3378%" height="15" fill="rgb(232,182,51)" fg:x="800" fg:w="100"/><text x="2.7131%" y="319.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.34%)</title><rect x="2.7027%" y="293" width="0.3378%" height="15" fill="rgb(231,60,39)" fg:x="800" fg:w="100"/><text x="2.7131%" y="303.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (100 samples, 0.34%)</title><rect x="2.7027%" y="277" width="0.3378%" height="15" fill="rgb(208,69,12)" fg:x="800" fg:w="100"/><text x="2.7131%" y="287.50">alloc::allo..</text></g><g><title>__rustc::__rdl_alloc (100 samples, 0.34%)</title><rect x="2.7027%" y="261" width="0.3378%" height="15" fill="rgb(235,93,37)" fg:x="800" fg:w="100"/><text x="2.7131%" y="271.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.34%)</title><rect x="2.7027%" y="245" width="0.3378%" height="15" fill="rgb(213,116,39)" fg:x="800" fg:w="100"/><text x="2.7131%" y="255.50">std::sys::a..</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="2.7027%" y="229" width="0.3378%" height="15" fill="rgb(222,207,29)" fg:x="800" fg:w="100"/><text x="2.7131%" y="239.50">__GI___libc..</text></g><g><title>_int_malloc (100 samples, 0.34%)</title><rect x="2.7027%" y="213" width="0.3378%" height="15" fill="rgb(206,96,30)" fg:x="800" fg:w="100"/><text x="2.7131%" y="223.50">_int_malloc</text></g><g><title>&lt;chumsky::combinator::Collect&lt;A,O,C&gt; as chumsky::Parser&lt;I,C,E&gt;&gt;::go_emit (100 samples, 0.34%)</title><rect x="3.0405%" y="421" width="0.3378%" height="15" fill="rgb(218,138,4)" fg:x="900" fg:w="100"/><text x="3.0510%" y="431.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::combinator::Collect&lt;A,O,C&gt; as chumsky::Parser&lt;I,C,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="3.0405%" y="405" width="0.3378%" height="15" fill="rgb(250,191,14)" fg:x="900" fg:w="100"/><text x="3.0510%" y="415.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::private::Emit as chumsky::private::Mode&gt;::combine_mut (100 samples, 0.34%)</title><rect x="3.0405%" y="389" width="0.3378%" height="15" fill="rgb(239,60,40)" fg:x="900" fg:w="100"/><text x="3.0510%" y="399.50">&lt;chumsky::p..</text></g><g><title>&lt;chumsky::combinator::Collect&lt;A,O,C&gt; as chumsky::Parser&lt;I,C,E&gt;&gt;::go::{{closure}} (100 samples, 0.34%)</title><rect x="3.0405%" y="373" width="0.3378%" height="15" fill="rgb(206,27,48)" fg:x="900" fg:w="100"/><text x="3.0510%" y="383.50">&lt;chumsky::c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as chumsky::container::Container&lt;T&gt;&gt;::push (100 samples, 0.34%)</title><rect x="3.0405%" y="357" width="0.3378%" height="15" fill="rgb(225,35,8)" fg:x="900" fg:w="100"/><text x="3.0510%" y="367.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (100 samples, 0.34%)</title><rect x="3.0405%" y="341" width="0.3378%" height="15" fill="rgb(250,213,24)" fg:x="900" fg:w="100"/><text x="3.0510%" y="351.50">alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (100 samples, 0.34%)</title><rect x="3.0405%" y="325" width="0.3378%" height="15" fill="rgb(247,123,22)" fg:x="900" fg:w="100"/><text x="3.0510%" y="335.50">alloc::vec:..</text></g><g><title>&lt;chumsky::error::Rich&lt;&lt;I as chumsky::input::Input&gt;::Token,&lt;I as chumsky::input::Input&gt;::Span&gt; as chumsky::label::LabelError&lt;I,L&gt;&gt;::expected_found (200 samples, 0.68%)</title><rect x="3.3784%" y="421" width="0.6757%" height="15" fill="rgb(231,138,38)" fg:x="1000" fg:w="200"/><text x="3.3888%" y="431.50">&lt;chumsky::error::Rich&lt;&lt;I ..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (200 samples, 0.68%)</title><rect x="3.3784%" y="405" width="0.6757%" height="15" fill="rgb(231,145,46)" fg:x="1000" fg:w="200"/><text x="3.3888%" y="415.50">alloc::boxed::Box&lt;T&gt;::new</text></g><g><title>alloc::alloc::exchange_malloc (100 samples, 0.34%)</title><rect x="3.7162%" y="389" width="0.3378%" height="15" fill="rgb(251,118,11)" fg:x="1100" fg:w="100"/><text x="3.7266%" y="399.50">alloc::allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.34%)</title><rect x="3.7162%" y="373" width="0.3378%" height="15" fill="rgb(217,147,25)" fg:x="1100" fg:w="100"/><text x="3.7266%" y="383.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.34%)</title><rect x="3.7162%" y="357" width="0.3378%" height="15" fill="rgb(247,81,37)" fg:x="1100" fg:w="100"/><text x="3.7266%" y="367.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (100 samples, 0.34%)</title><rect x="3.7162%" y="341" width="0.3378%" height="15" fill="rgb(209,12,38)" fg:x="1100" fg:w="100"/><text x="3.7266%" y="351.50">alloc::allo..</text></g><g><title>__rustc::__rdl_alloc (100 samples, 0.34%)</title><rect x="3.7162%" y="325" width="0.3378%" height="15" fill="rgb(227,1,9)" fg:x="1100" fg:w="100"/><text x="3.7266%" y="335.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.34%)</title><rect x="3.7162%" y="309" width="0.3378%" height="15" fill="rgb(248,47,43)" fg:x="1100" fg:w="100"/><text x="3.7266%" y="319.50">std::sys::a..</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="3.7162%" y="293" width="0.3378%" height="15" fill="rgb(221,10,30)" fg:x="1100" fg:w="100"/><text x="3.7266%" y="303.50">__GI___libc..</text></g><g><title>_int_malloc (100 samples, 0.34%)</title><rect x="3.7162%" y="277" width="0.3378%" height="15" fill="rgb(210,229,1)" fg:x="1100" fg:w="100"/><text x="3.7266%" y="287.50">_int_malloc</text></g><g><title>&lt;chumsky::error::Rich&lt;&lt;I as chumsky::input::Input&gt;::Token,&lt;I as chumsky::input::Input&gt;::Span&gt; as chumsky::label::LabelError&lt;I,L&gt;&gt;::label_with (100 samples, 0.34%)</title><rect x="4.0541%" y="421" width="0.3378%" height="15" fill="rgb(222,148,37)" fg:x="1200" fg:w="100"/><text x="4.0645%" y="431.50">&lt;chumsky::e..</text></g><g><title>&lt;chumsky::label::Labelled&lt;A,L&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (400 samples, 1.35%)</title><rect x="4.3919%" y="421" width="1.3514%" height="15" fill="rgb(234,67,33)" fg:x="1300" fg:w="400"/><text x="4.4023%" y="431.50">&lt;chumsky::label::Labelled&lt;A,L&gt; as chumsky::Parser&lt;I,..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;chumsky::private::Located&lt;usize,chumsky::error::Rich&lt;char&gt;&gt;&gt;&gt; (100 samples, 0.34%)</title><rect x="5.4054%" y="405" width="0.3378%" height="15" fill="rgb(247,98,35)" fg:x="1600" fg:w="100"/><text x="5.4158%" y="415.50">core::ptr::..</text></g><g><title>&lt;chumsky::pratt::Infix&lt;A,F,O,Op,I,E&gt; as chumsky::pratt::Operator&lt;I,O,E&gt;&gt;::do_parse_infix_emit (100 samples, 0.34%)</title><rect x="5.7432%" y="421" width="0.3378%" height="15" fill="rgb(247,138,52)" fg:x="1700" fg:w="100"/><text x="5.7537%" y="431.50">&lt;chumsky::p..</text></g><g><title>&lt;chumsky::combinator::Map&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="6.0811%" y="405" width="0.3378%" height="15" fill="rgb(213,79,30)" fg:x="1800" fg:w="100"/><text x="6.0915%" y="415.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::combinator::ToSlice&lt;A,O&gt; as chumsky::Parser&lt;I,&lt;I as chumsky::input::SliceInput&gt;::Slice,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="6.0811%" y="389" width="0.3378%" height="15" fill="rgb(246,177,23)" fg:x="1800" fg:w="100"/><text x="6.0915%" y="399.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::combinator::Then&lt;A,B,OA,OB,E&gt; as chumsky::Parser&lt;I,(OA,OB),E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="6.0811%" y="373" width="0.3378%" height="15" fill="rgb(230,62,27)" fg:x="1800" fg:w="100"/><text x="6.0915%" y="383.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::combinator::TryMap&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="6.0811%" y="357" width="0.3378%" height="15" fill="rgb(216,154,8)" fg:x="1800" fg:w="100"/><text x="6.0915%" y="367.50">&lt;chumsky::c..</text></g><g><title>core::option::Option&lt;T&gt;::take (100 samples, 0.34%)</title><rect x="6.0811%" y="341" width="0.3378%" height="15" fill="rgb(244,35,45)" fg:x="1800" fg:w="100"/><text x="6.0915%" y="351.50">core::optio..</text></g><g><title>core::mem::replace (100 samples, 0.34%)</title><rect x="6.0811%" y="325" width="0.3378%" height="15" fill="rgb(251,115,12)" fg:x="1800" fg:w="100"/><text x="6.0915%" y="335.50">core::mem::..</text></g><g><title>&lt;chumsky::combinator::To&lt;A,OA,O&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (200 samples, 0.68%)</title><rect x="7.0946%" y="373" width="0.6757%" height="15" fill="rgb(240,54,50)" fg:x="2100" fg:w="200"/><text x="7.1050%" y="383.50">&lt;chumsky::combinator::To&lt;..</text></g><g><title>&lt;chumsky::label::Labelled&lt;A,L&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (500 samples, 1.69%)</title><rect x="6.4189%" y="405" width="1.6892%" height="15" fill="rgb(233,84,52)" fg:x="1900" fg:w="500"/><text x="6.4293%" y="415.50">&lt;chumsky::label::Labelled&lt;A,L&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go</text></g><g><title>&lt;chumsky::primitive::Choice&lt;(W_,X_,Y_,Z_)&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (300 samples, 1.01%)</title><rect x="7.0946%" y="389" width="1.0135%" height="15" fill="rgb(207,117,47)" fg:x="2100" fg:w="300"/><text x="7.1050%" y="399.50">&lt;chumsky::primitive::Choice&lt;(W_,X_,Y_,Z..</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::rewind (100 samples, 0.34%)</title><rect x="7.7703%" y="373" width="0.3378%" height="15" fill="rgb(249,43,39)" fg:x="2300" fg:w="100"/><text x="7.7807%" y="383.50">chumsky::in..</text></g><g><title>&lt;chumsky::primitive::Choice&lt;(I_,J_,K_,L_,M_,N_,O_,P_,Q_,R_,S_,T_,U_,V_,W_,X_,Y_,Z_)&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (700 samples, 2.36%)</title><rect x="6.0811%" y="421" width="2.3649%" height="15" fill="rgb(209,38,44)" fg:x="1800" fg:w="700"/><text x="6.0915%" y="431.50">&lt;chumsky::primitive::Choice&lt;(I_,J_,K_,L_,M_,N_,O_,P_,Q_,R_,S_,T_,U_,V_,W_,X_,Y_,Z_)&gt; as chumsk..</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::rewind (100 samples, 0.34%)</title><rect x="8.1081%" y="405" width="0.3378%" height="15" fill="rgb(236,212,23)" fg:x="2400" fg:w="100"/><text x="8.1185%" y="415.50">chumsky::in..</text></g><g><title>&lt;chumsky::combinator::MapWith&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="8.4459%" y="405" width="0.3378%" height="15" fill="rgb(242,79,21)" fg:x="2500" fg:w="100"/><text x="8.4564%" y="415.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::primitive::SelectRef&lt;F,I,O,E&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="8.4459%" y="389" width="0.3378%" height="15" fill="rgb(211,96,35)" fg:x="2500" fg:w="100"/><text x="8.4564%" y="399.50">&lt;chumsky::p..</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::span_since (100 samples, 0.34%)</title><rect x="8.4459%" y="373" width="0.3378%" height="15" fill="rgb(253,215,40)" fg:x="2500" fg:w="100"/><text x="8.4564%" y="383.50">chumsky::in..</text></g><g><title>&lt;chumsky::input::MappedInput&lt;T,S,I,F&gt; as chumsky::input::Input&gt;::span (100 samples, 0.34%)</title><rect x="8.4459%" y="357" width="0.3378%" height="15" fill="rgb(211,81,21)" fg:x="2500" fg:w="100"/><text x="8.4564%" y="367.50">&lt;chumsky::i..</text></g><g><title>&lt;chumsky::combinator::Memoized&lt;A&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (200 samples, 0.68%)</title><rect x="9.7973%" y="357" width="0.6757%" height="15" fill="rgb(208,190,38)" fg:x="2900" fg:w="200"/><text x="9.8077%" y="367.50">&lt;chumsky::combinator::Mem..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (100 samples, 0.34%)</title><rect x="10.1351%" y="341" width="0.3378%" height="15" fill="rgb(235,213,38)" fg:x="3000" fg:w="100"/><text x="10.1456%" y="351.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (100 samples, 0.34%)</title><rect x="10.1351%" y="325" width="0.3378%" height="15" fill="rgb(237,122,38)" fg:x="3000" fg:w="100"/><text x="10.1456%" y="335.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (100 samples, 0.34%)</title><rect x="10.1351%" y="309" width="0.3378%" height="15" fill="rgb(244,218,35)" fg:x="3000" fg:w="100"/><text x="10.1456%" y="319.50">hashbrown::..</text></g><g><title>hashbrown::util::likely (100 samples, 0.34%)</title><rect x="10.1351%" y="293" width="0.3378%" height="15" fill="rgb(240,68,47)" fg:x="3000" fg:w="100"/><text x="10.1456%" y="303.50">hashbrown::..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (100 samples, 0.34%)</title><rect x="10.8108%" y="277" width="0.3378%" height="15" fill="rgb(210,16,53)" fg:x="3200" fg:w="100"/><text x="10.8212%" y="287.50">&lt;core::resu..</text></g><g><title>&lt;chumsky::combinator::OrNot&lt;A&gt; as chumsky::Parser&lt;I,core::option::Option&lt;O&gt;,E&gt;&gt;::go (300 samples, 1.01%)</title><rect x="10.4730%" y="357" width="1.0135%" height="15" fill="rgb(235,124,12)" fg:x="3100" fg:w="300"/><text x="10.4834%" y="367.50">&lt;chumsky::combinator::OrNot&lt;A&gt; as chums..</text></g><g><title>&lt;chumsky::combinator::DelimitedBy&lt;A,B,C,OB,OC&gt; as chumsky::Parser&lt;I,OA,E&gt;&gt;::go (300 samples, 1.01%)</title><rect x="10.4730%" y="341" width="1.0135%" height="15" fill="rgb(224,169,11)" fg:x="3100" fg:w="300"/><text x="10.4834%" y="351.50">&lt;chumsky::combinator::DelimitedBy&lt;A,B,C..</text></g><g><title>&lt;chumsky::combinator::Collect&lt;A,O,C&gt; as chumsky::Parser&lt;I,C,E&gt;&gt;::go (300 samples, 1.01%)</title><rect x="10.4730%" y="325" width="1.0135%" height="15" fill="rgb(250,166,2)" fg:x="3100" fg:w="300"/><text x="10.4834%" y="335.50">&lt;chumsky::combinator::Collect&lt;A,O,C&gt; as..</text></g><g><title>&lt;chumsky::combinator::SeparatedBy&lt;A,B,OA,OB,I,E&gt; as chumsky::IterParser&lt;I,OA,E&gt;&gt;::next (300 samples, 1.01%)</title><rect x="10.4730%" y="309" width="1.0135%" height="15" fill="rgb(242,216,29)" fg:x="3100" fg:w="300"/><text x="10.4834%" y="319.50">&lt;chumsky::combinator::SeparatedBy&lt;A,B,O..</text></g><g><title>&lt;chumsky::combinator::Then&lt;A,B,OA,OB,E&gt; as chumsky::Parser&lt;I,(OA,OB),E&gt;&gt;::go (300 samples, 1.01%)</title><rect x="10.4730%" y="293" width="1.0135%" height="15" fill="rgb(230,116,27)" fg:x="3100" fg:w="300"/><text x="10.4834%" y="303.50">&lt;chumsky::combinator::Then&lt;A,B,OA,OB,E&gt;..</text></g><g><title>__memmove_avx_unaligned_erms (100 samples, 0.34%)</title><rect x="11.1486%" y="277" width="0.3378%" height="15" fill="rgb(228,99,48)" fg:x="3300" fg:w="100"/><text x="11.1591%" y="287.50">__memmove_a..</text></g><g><title>&lt;chumsky::label::Labelled&lt;A,L&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (1,000 samples, 3.38%)</title><rect x="8.7838%" y="405" width="3.3784%" height="15" fill="rgb(253,11,6)" fg:x="2600" fg:w="1000"/><text x="8.7942%" y="415.50">&lt;chumsky::label::Labelled&lt;A,L&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go</text></g><g><title>&lt;chumsky::combinator::MapWith&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (700 samples, 2.36%)</title><rect x="9.7973%" y="389" width="2.3649%" height="15" fill="rgb(247,143,39)" fg:x="2900" fg:w="700"/><text x="9.8077%" y="399.50">&lt;chumsky::combinator::MapWith&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go</text></g><g><title>&lt;chumsky::combinator::Then&lt;A,B,OA,OB,E&gt; as chumsky::Parser&lt;I,(OA,OB),E&gt;&gt;::go (700 samples, 2.36%)</title><rect x="9.7973%" y="373" width="2.3649%" height="15" fill="rgb(236,97,10)" fg:x="2900" fg:w="700"/><text x="9.8077%" y="383.50">&lt;chumsky::combinator::Then&lt;A,B,OA,OB,E&gt; as chumsky::Parser&lt;I,(OA,OB),E&gt;&gt;::go</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (200 samples, 0.68%)</title><rect x="11.4865%" y="357" width="0.6757%" height="15" fill="rgb(233,208,19)" fg:x="3400" fg:w="200"/><text x="11.4969%" y="367.50">&lt;core::result::Result&lt;T,E..</text></g><g><title>&lt;chumsky::primitive::Choice&lt;(Q_,R_,S_,T_,U_,V_,W_,X_,Y_,Z_)&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (1,200 samples, 4.05%)</title><rect x="8.4459%" y="421" width="4.0541%" height="15" fill="rgb(216,164,2)" fg:x="2500" fg:w="1200"/><text x="8.4564%" y="431.50">&lt;chumsky::primitive::Choice&lt;(Q_,R_,S_,T_,U_,V_,W_,X_,Y_,Z_)&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::rewind (100 samples, 0.34%)</title><rect x="12.1622%" y="405" width="0.3378%" height="15" fill="rgb(220,129,5)" fg:x="3600" fg:w="100"/><text x="12.1726%" y="415.50">chumsky::in..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (100 samples, 0.34%)</title><rect x="12.1622%" y="389" width="0.3378%" height="15" fill="rgb(242,17,10)" fg:x="3600" fg:w="100"/><text x="12.1726%" y="399.50">alloc::vec:..</text></g><g><title>&lt;chumsky::combinator::MapWith&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="12.5000%" y="405" width="0.3378%" height="15" fill="rgb(242,107,0)" fg:x="3700" fg:w="100"/><text x="12.5104%" y="415.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::combinator::Then&lt;A,B,OA,OB,E&gt; as chumsky::Parser&lt;I,(OA,OB),E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="12.5000%" y="389" width="0.3378%" height="15" fill="rgb(251,28,31)" fg:x="3700" fg:w="100"/><text x="12.5104%" y="399.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::combinator::Memoized&lt;A&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="12.5000%" y="373" width="0.3378%" height="15" fill="rgb(233,223,10)" fg:x="3700" fg:w="100"/><text x="12.5104%" y="383.50">&lt;chumsky::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (100 samples, 0.34%)</title><rect x="12.5000%" y="357" width="0.3378%" height="15" fill="rgb(215,21,27)" fg:x="3700" fg:w="100"/><text x="12.5104%" y="367.50">hashbrown::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (100 samples, 0.34%)</title><rect x="12.5000%" y="341" width="0.3378%" height="15" fill="rgb(232,23,21)" fg:x="3700" fg:w="100"/><text x="12.5104%" y="351.50">hashbrown::..</text></g><g><title>hashbrown::map::make_hash (100 samples, 0.34%)</title><rect x="12.5000%" y="325" width="0.3378%" height="15" fill="rgb(244,5,23)" fg:x="3700" fg:w="100"/><text x="12.5104%" y="335.50">hashbrown::..</text></g><g><title>&lt;foldhash::fast::FoldHasher as core::hash::Hasher&gt;::finish (100 samples, 0.34%)</title><rect x="12.5000%" y="309" width="0.3378%" height="15" fill="rgb(226,81,46)" fg:x="3700" fg:w="100"/><text x="12.5104%" y="319.50">&lt;foldhash::..</text></g><g><title>foldhash::folded_multiply (100 samples, 0.34%)</title><rect x="12.5000%" y="293" width="0.3378%" height="15" fill="rgb(247,70,30)" fg:x="3700" fg:w="100"/><text x="12.5104%" y="303.50">foldhash::f..</text></g><g><title>&lt;chumsky::primitive::Choice&lt;(W_,X_,Y_,Z_)&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (200 samples, 0.68%)</title><rect x="12.5000%" y="421" width="0.6757%" height="15" fill="rgb(212,68,19)" fg:x="3700" fg:w="200"/><text x="12.5104%" y="431.50">&lt;chumsky::primitive::Choi..</text></g><g><title>&lt;chumsky::label::Labelled&lt;A,L&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="12.8378%" y="405" width="0.3378%" height="15" fill="rgb(240,187,13)" fg:x="3800" fg:w="100"/><text x="12.8483%" y="415.50">&lt;chumsky::l..</text></g><g><title>&lt;chumsky::combinator::Map&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="12.8378%" y="389" width="0.3378%" height="15" fill="rgb(223,113,26)" fg:x="3800" fg:w="100"/><text x="12.8483%" y="399.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::combinator::Then&lt;A,B,OA,OB,E&gt; as chumsky::Parser&lt;I,(OA,OB),E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="12.8378%" y="373" width="0.3378%" height="15" fill="rgb(206,192,2)" fg:x="3800" fg:w="100"/><text x="12.8483%" y="383.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::combinator::FoldrWith&lt;F,A,B,OA,E&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="12.8378%" y="357" width="0.3378%" height="15" fill="rgb(241,108,4)" fg:x="3800" fg:w="100"/><text x="12.8483%" y="367.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::private::Emit as chumsky::private::Mode&gt;::combine (100 samples, 0.34%)</title><rect x="12.8378%" y="341" width="0.3378%" height="15" fill="rgb(247,173,49)" fg:x="3800" fg:w="100"/><text x="12.8483%" y="351.50">&lt;chumsky::p..</text></g><g><title>&lt;chumsky::combinator::FoldrWith&lt;F,A,B,OA,E&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go::{{closure}} (100 samples, 0.34%)</title><rect x="12.8378%" y="325" width="0.3378%" height="15" fill="rgb(224,114,35)" fg:x="3800" fg:w="100"/><text x="12.8483%" y="335.50">&lt;chumsky::c..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (100 samples, 0.34%)</title><rect x="12.8378%" y="309" width="0.3378%" height="15" fill="rgb(245,159,27)" fg:x="3800" fg:w="100"/><text x="12.8483%" y="319.50">core::iter:..</text></g><g><title>&lt;&amp;str as chumsky::container::Seq&lt;char&gt;&gt;::seq_iter (100 samples, 0.34%)</title><rect x="14.5270%" y="389" width="0.3378%" height="15" fill="rgb(245,172,44)" fg:x="4300" fg:w="100"/><text x="14.5374%" y="399.50">&lt;&amp;str as ch..</text></g><g><title>core::str::&lt;impl str&gt;::chars (100 samples, 0.34%)</title><rect x="14.5270%" y="373" width="0.3378%" height="15" fill="rgb(236,23,11)" fg:x="4300" fg:w="100"/><text x="14.5374%" y="383.50">core::str::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (100 samples, 0.34%)</title><rect x="14.5270%" y="357" width="0.3378%" height="15" fill="rgb(205,117,38)" fg:x="4300" fg:w="100"/><text x="14.5374%" y="367.50">core::slice..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (100 samples, 0.34%)</title><rect x="14.5270%" y="341" width="0.3378%" height="15" fill="rgb(237,72,25)" fg:x="4300" fg:w="100"/><text x="14.5374%" y="351.50">core::slice..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (100 samples, 0.34%)</title><rect x="14.5270%" y="325" width="0.3378%" height="15" fill="rgb(244,70,9)" fg:x="4300" fg:w="100"/><text x="14.5374%" y="335.50">core::ptr::..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (200 samples, 0.68%)</title><rect x="14.8649%" y="389" width="0.6757%" height="15" fill="rgb(217,125,39)" fg:x="4400" fg:w="200"/><text x="14.8753%" y="399.50">&lt;core::str::iter::Chars a..</text></g><g><title>core::str::validations::next_code_point (200 samples, 0.68%)</title><rect x="14.8649%" y="373" width="0.6757%" height="15" fill="rgb(235,36,10)" fg:x="4400" fg:w="200"/><text x="14.8753%" y="383.50">core::str::validations::n..</text></g><g><title>&lt;chumsky::primitive::Just&lt;T,I,E&gt; as chumsky::ConfigParser&lt;I,T,E&gt;&gt;::go_cfg (600 samples, 2.03%)</title><rect x="14.1892%" y="405" width="2.0270%" height="15" fill="rgb(251,123,47)" fg:x="4200" fg:w="600"/><text x="14.1996%" y="415.50">&lt;chumsky::primitive::Just&lt;T,I,E&gt; as chumsky::ConfigParser&lt;I,T,E&gt;&gt;::go_cfg</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::next_maybe_inner (200 samples, 0.68%)</title><rect x="15.5405%" y="389" width="0.6757%" height="15" fill="rgb(221,13,13)" fg:x="4600" fg:w="200"/><text x="15.5510%" y="399.50">chumsky::input::InputRef&lt;..</text></g><g><title>&lt;chumsky::input::MappedInput&lt;T,S,I,F&gt; as chumsky::input::Input&gt;::next_maybe (200 samples, 0.68%)</title><rect x="15.5405%" y="373" width="0.6757%" height="15" fill="rgb(238,131,9)" fg:x="4600" fg:w="200"/><text x="15.5510%" y="383.50">&lt;chumsky::input::MappedIn..</text></g><g><title>&lt;&amp;[T] as chumsky::input::Input&gt;::next_maybe (200 samples, 0.68%)</title><rect x="15.5405%" y="357" width="0.6757%" height="15" fill="rgb(211,50,8)" fg:x="4600" fg:w="200"/><text x="15.5510%" y="367.50">&lt;&amp;[T] as chumsky::input::..</text></g><g><title>&lt;chumsky::primitive::Just&lt;T,I,E&gt; as chumsky::Parser&lt;I,T,E&gt;&gt;::go (1,000 samples, 3.38%)</title><rect x="13.1757%" y="421" width="3.3784%" height="15" fill="rgb(245,182,24)" fg:x="3900" fg:w="1000"/><text x="13.1861%" y="431.50">&lt;chumsky::primitive::Just&lt;T,I,E&gt; as chumsky::Parser&lt;I,T,E&gt;&gt;::go</text></g><g><title>&lt;chumsky::primitive::JustCfg&lt;T&gt; as core::default::Default&gt;::default (100 samples, 0.34%)</title><rect x="16.2162%" y="405" width="0.3378%" height="15" fill="rgb(242,14,37)" fg:x="4800" fg:w="100"/><text x="16.2266%" y="415.50">&lt;chumsky::p..</text></g><g><title>&lt;chumsky::private::Located&lt;T,E&gt; as core::clone::Clone&gt;::clone (100 samples, 0.34%)</title><rect x="16.5541%" y="421" width="0.3378%" height="15" fill="rgb(246,228,12)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="431.50">&lt;chumsky::p..</text></g><g><title>&lt;chumsky::error::Rich&lt;T,S&gt; as core::clone::Clone&gt;::clone (100 samples, 0.34%)</title><rect x="16.5541%" y="405" width="0.3378%" height="15" fill="rgb(213,55,15)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="415.50">&lt;chumsky::e..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (100 samples, 0.34%)</title><rect x="16.5541%" y="389" width="0.3378%" height="15" fill="rgb(209,9,3)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="399.50">&lt;alloc::box..</text></g><g><title>&lt;T as core::clone::CloneToUninit&gt;::clone_to_uninit (100 samples, 0.34%)</title><rect x="16.5541%" y="373" width="0.3378%" height="15" fill="rgb(230,59,30)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="383.50">&lt;T as core:..</text></g><g><title>&lt;T as core::clone::uninit::CopySpec&gt;::clone_one (100 samples, 0.34%)</title><rect x="16.5541%" y="357" width="0.3378%" height="15" fill="rgb(209,121,21)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="367.50">&lt;T as core:..</text></g><g><title>&lt;chumsky::error::RichReason&lt;T&gt; as core::clone::Clone&gt;::clone (100 samples, 0.34%)</title><rect x="16.5541%" y="341" width="0.3378%" height="15" fill="rgb(220,109,13)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="351.50">&lt;chumsky::e..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (100 samples, 0.34%)</title><rect x="16.5541%" y="325" width="0.3378%" height="15" fill="rgb(232,18,1)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="335.50">&lt;alloc::vec..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (100 samples, 0.34%)</title><rect x="16.5541%" y="309" width="0.3378%" height="15" fill="rgb(215,41,42)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="319.50">alloc::slic..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (100 samples, 0.34%)</title><rect x="16.5541%" y="293" width="0.3378%" height="15" fill="rgb(224,123,36)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="303.50">&lt;T as alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="16.5541%" y="277" width="0.3378%" height="15" fill="rgb(240,125,3)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="287.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="16.5541%" y="261" width="0.3378%" height="15" fill="rgb(205,98,50)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="271.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="16.5541%" y="245" width="0.3378%" height="15" fill="rgb(205,185,37)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="255.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (100 samples, 0.34%)</title><rect x="16.5541%" y="229" width="0.3378%" height="15" fill="rgb(238,207,15)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="239.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.34%)</title><rect x="16.5541%" y="213" width="0.3378%" height="15" fill="rgb(213,199,42)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="223.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.34%)</title><rect x="16.5541%" y="197" width="0.3378%" height="15" fill="rgb(235,201,11)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="207.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (100 samples, 0.34%)</title><rect x="16.5541%" y="181" width="0.3378%" height="15" fill="rgb(207,46,11)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="191.50">alloc::allo..</text></g><g><title>__rustc::__rdl_alloc (100 samples, 0.34%)</title><rect x="16.5541%" y="165" width="0.3378%" height="15" fill="rgb(241,35,35)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="175.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.34%)</title><rect x="16.5541%" y="149" width="0.3378%" height="15" fill="rgb(243,32,47)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="159.50">std::sys::a..</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="16.5541%" y="133" width="0.3378%" height="15" fill="rgb(247,202,23)" fg:x="4900" fg:w="100"/><text x="16.5645%" y="143.50">__GI___libc..</text></g><g><title>&lt;chumsky::recovery::RecoverWith&lt;A,S&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="16.8919%" y="421" width="0.3378%" height="15" fill="rgb(219,102,11)" fg:x="5000" fg:w="100"/><text x="16.9023%" y="431.50">&lt;chumsky::r..</text></g><g><title>&lt;chumsky::recovery::ViaParser&lt;A&gt; as chumsky::recovery::Strategy&lt;I,O,E&gt;&gt;::recover (100 samples, 0.34%)</title><rect x="16.8919%" y="405" width="0.3378%" height="15" fill="rgb(243,110,44)" fg:x="5000" fg:w="100"/><text x="16.9023%" y="415.50">&lt;chumsky::r..</text></g><g><title>&lt;chumsky::combinator::MapWith&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="16.8919%" y="389" width="0.3378%" height="15" fill="rgb(222,74,54)" fg:x="5000" fg:w="100"/><text x="16.9023%" y="399.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::text::Padded&lt;A&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="16.8919%" y="373" width="0.3378%" height="15" fill="rgb(216,99,12)" fg:x="5000" fg:w="100"/><text x="16.9023%" y="383.50">&lt;chumsky::t..</text></g><g><title>&lt;chumsky::combinator::PaddedBy&lt;A,B,OB&gt; as chumsky::Parser&lt;I,OA,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="16.8919%" y="357" width="0.3378%" height="15" fill="rgb(226,22,26)" fg:x="5000" fg:w="100"/><text x="16.9023%" y="367.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::primitive::Any&lt;I,E&gt; as chumsky::Parser&lt;I,&lt;I as chumsky::input::Input&gt;::Token,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="16.8919%" y="341" width="0.3378%" height="15" fill="rgb(217,163,10)" fg:x="5000" fg:w="100"/><text x="16.9023%" y="351.50">&lt;chumsky::p..</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::next_inner (100 samples, 0.34%)</title><rect x="16.8919%" y="325" width="0.3378%" height="15" fill="rgb(213,25,53)" fg:x="5000" fg:w="100"/><text x="16.9023%" y="335.50">chumsky::in..</text></g><g><title>&lt;&amp;str as chumsky::input::ValueInput&gt;::next (100 samples, 0.34%)</title><rect x="16.8919%" y="309" width="0.3378%" height="15" fill="rgb(252,105,26)" fg:x="5000" fg:w="100"/><text x="16.9023%" y="319.50">&lt;&amp;str as ch..</text></g><g><title>&lt;&amp;str as chumsky::input::Input&gt;::next_maybe (100 samples, 0.34%)</title><rect x="16.8919%" y="293" width="0.3378%" height="15" fill="rgb(220,39,43)" fg:x="5000" fg:w="100"/><text x="16.9023%" y="303.50">&lt;&amp;str as ch..</text></g><g><title>&lt;chumsky::recursive::Recursive&lt;dyn chumsky::Parser&lt;I,O,E&gt;&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (200 samples, 0.68%)</title><rect x="17.2297%" y="421" width="0.6757%" height="15" fill="rgb(229,68,48)" fg:x="5100" fg:w="200"/><text x="17.2401%" y="431.50">&lt;chumsky::recursive::Recu..</text></g><g><title>chumsky::recursive::recurse (100 samples, 0.34%)</title><rect x="17.5676%" y="405" width="0.3378%" height="15" fill="rgb(252,8,32)" fg:x="5200" fg:w="100"/><text x="17.5780%" y="415.50">chumsky::re..</text></g><g><title>stacker::maybe_grow (100 samples, 0.34%)</title><rect x="17.5676%" y="389" width="0.3378%" height="15" fill="rgb(223,20,43)" fg:x="5200" fg:w="100"/><text x="17.5780%" y="399.50">stacker::ma..</text></g><g><title>&lt;chumsky::recursive::Recursive&lt;dyn chumsky::Parser&lt;I,O,E&gt;&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go::{{closure}} (100 samples, 0.34%)</title><rect x="17.5676%" y="373" width="0.3378%" height="15" fill="rgb(229,81,49)" fg:x="5200" fg:w="100"/><text x="17.5780%" y="383.50">&lt;chumsky::r..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;dyn chumsky::Parser&lt;chumsky::input::MappedInput&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;,&amp;[(flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;)],flare_internals::passes::parser::make_input::{{closure}}&gt;,flare_internals::resource::rep::Definition,chumsky::extra::Full&lt;chumsky::error::Rich&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;&gt;,chumsky::inspector::SimpleState&lt;u64&gt;,()&gt;&gt;&gt;&gt; (100 samples, 0.34%)</title><rect x="17.5676%" y="357" width="0.3378%" height="15" fill="rgb(236,28,36)" fg:x="5200" fg:w="100"/><text x="17.5780%" y="367.50">core::ptr::..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="17.5676%" y="341" width="0.3378%" height="15" fill="rgb(249,185,26)" fg:x="5200" fg:w="100"/><text x="17.5780%" y="351.50">&lt;alloc::rc:..</text></g><g><title>&lt;chumsky::text::Padded&lt;A&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="17.9054%" y="421" width="0.3378%" height="15" fill="rgb(249,174,33)" fg:x="5300" fg:w="100"/><text x="17.9158%" y="431.50">&lt;chumsky::t..</text></g><g><title>&lt;chumsky::label::Labelled&lt;A,L&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="17.9054%" y="405" width="0.3378%" height="15" fill="rgb(233,201,37)" fg:x="5300" fg:w="100"/><text x="17.9158%" y="415.50">&lt;chumsky::l..</text></g><g><title>core::option::Option&lt;T&gt;::take (100 samples, 0.34%)</title><rect x="17.9054%" y="389" width="0.3378%" height="15" fill="rgb(221,78,26)" fg:x="5300" fg:w="100"/><text x="17.9158%" y="399.50">core::optio..</text></g><g><title>core::mem::replace (100 samples, 0.34%)</title><rect x="17.9054%" y="373" width="0.3378%" height="15" fill="rgb(250,127,30)" fg:x="5300" fg:w="100"/><text x="17.9158%" y="383.50">core::mem::..</text></g><g><title>&lt;flare_internals::passes::parser::Token as core::clone::Clone&gt;::clone (500 samples, 1.69%)</title><rect x="18.2432%" y="421" width="1.6892%" height="15" fill="rgb(230,49,44)" fg:x="5400" fg:w="500"/><text x="18.2537%" y="431.50">&lt;flare_internals::passes::parser::Token as core::clone::Clone&gt;::cl..</text></g><g><title>&lt;flare_internals::passes::parser::Token as core::cmp::PartialEq&gt;::eq (600 samples, 2.03%)</title><rect x="19.9324%" y="421" width="2.0270%" height="15" fill="rgb(229,67,23)" fg:x="5900" fg:w="600"/><text x="19.9428%" y="431.50">&lt;flare_internals::passes::parser::Token as core::cmp::PartialEq&gt;::eq</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (600 samples, 2.03%)</title><rect x="22.2973%" y="405" width="2.0270%" height="15" fill="rgb(249,83,47)" fg:x="6600" fg:w="600"/><text x="22.3077%" y="415.50">&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (600 samples, 2.03%)</title><rect x="22.2973%" y="389" width="2.0270%" height="15" fill="rgb(215,43,3)" fg:x="6600" fg:w="600"/><text x="22.3077%" y="399.50">alloc::boxed::Box&lt;T,A&gt;::new_uninit_in</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (500 samples, 1.69%)</title><rect x="22.6351%" y="373" width="1.6892%" height="15" fill="rgb(238,154,13)" fg:x="6700" fg:w="500"/><text x="22.6456%" y="383.50">alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (500 samples, 1.69%)</title><rect x="22.6351%" y="357" width="1.6892%" height="15" fill="rgb(219,56,2)" fg:x="6700" fg:w="500"/><text x="22.6456%" y="367.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate</text></g><g><title>alloc::alloc::Global::alloc_impl (500 samples, 1.69%)</title><rect x="22.6351%" y="341" width="1.6892%" height="15" fill="rgb(233,0,4)" fg:x="6700" fg:w="500"/><text x="22.6456%" y="351.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (500 samples, 1.69%)</title><rect x="22.6351%" y="325" width="1.6892%" height="15" fill="rgb(235,30,7)" fg:x="6700" fg:w="500"/><text x="22.6456%" y="335.50">alloc::alloc::alloc</text></g><g><title>__rustc::__rdl_alloc (500 samples, 1.69%)</title><rect x="22.6351%" y="309" width="1.6892%" height="15" fill="rgb(250,79,13)" fg:x="6700" fg:w="500"/><text x="22.6456%" y="319.50">__rustc::__rdl_alloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (500 samples, 1.69%)</title><rect x="22.6351%" y="293" width="1.6892%" height="15" fill="rgb(211,146,34)" fg:x="6700" fg:w="500"/><text x="22.6456%" y="303.50">std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for ..</text></g><g><title>__GI___libc_malloc (400 samples, 1.35%)</title><rect x="22.9730%" y="277" width="1.3514%" height="15" fill="rgb(228,22,38)" fg:x="6800" fg:w="400"/><text x="22.9834%" y="287.50">__GI___libc_malloc</text></g><g><title>_int_malloc (200 samples, 0.68%)</title><rect x="23.6486%" y="261" width="0.6757%" height="15" fill="rgb(235,168,5)" fg:x="7000" fg:w="200"/><text x="23.6591%" y="271.50">_int_malloc</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="24.3243%" y="341" width="0.3378%" height="15" fill="rgb(221,155,16)" fg:x="7200" fg:w="100"/><text x="24.3347%" y="351.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="24.3243%" y="325" width="0.3378%" height="15" fill="rgb(215,215,53)" fg:x="7200" fg:w="100"/><text x="24.3347%" y="335.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="24.3243%" y="309" width="0.3378%" height="15" fill="rgb(223,4,10)" fg:x="7200" fg:w="100"/><text x="24.3347%" y="319.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (100 samples, 0.34%)</title><rect x="24.3243%" y="293" width="0.3378%" height="15" fill="rgb(234,103,6)" fg:x="7200" fg:w="100"/><text x="24.3347%" y="303.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.34%)</title><rect x="24.3243%" y="277" width="0.3378%" height="15" fill="rgb(227,97,0)" fg:x="7200" fg:w="100"/><text x="24.3347%" y="287.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.34%)</title><rect x="24.3243%" y="261" width="0.3378%" height="15" fill="rgb(234,150,53)" fg:x="7200" fg:w="100"/><text x="24.3347%" y="271.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (100 samples, 0.34%)</title><rect x="24.3243%" y="245" width="0.3378%" height="15" fill="rgb(228,201,54)" fg:x="7200" fg:w="100"/><text x="24.3347%" y="255.50">alloc::allo..</text></g><g><title>__rustc::__rdl_alloc (100 samples, 0.34%)</title><rect x="24.3243%" y="229" width="0.3378%" height="15" fill="rgb(222,22,37)" fg:x="7200" fg:w="100"/><text x="24.3347%" y="239.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.34%)</title><rect x="24.3243%" y="213" width="0.3378%" height="15" fill="rgb(237,53,32)" fg:x="7200" fg:w="100"/><text x="24.3347%" y="223.50">std::sys::a..</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="24.3243%" y="197" width="0.3378%" height="15" fill="rgb(233,25,53)" fg:x="7200" fg:w="100"/><text x="24.3347%" y="207.50">__GI___libc..</text></g><g><title>_int_malloc (100 samples, 0.34%)</title><rect x="24.3243%" y="181" width="0.3378%" height="15" fill="rgb(210,40,34)" fg:x="7200" fg:w="100"/><text x="24.3347%" y="191.50">_int_malloc</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (200 samples, 0.68%)</title><rect x="24.3243%" y="405" width="0.6757%" height="15" fill="rgb(241,220,44)" fg:x="7200" fg:w="200"/><text x="24.3347%" y="415.50">&lt;alloc::string::String as..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (200 samples, 0.68%)</title><rect x="24.3243%" y="389" width="0.6757%" height="15" fill="rgb(235,28,35)" fg:x="7200" fg:w="200"/><text x="24.3347%" y="399.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (200 samples, 0.68%)</title><rect x="24.3243%" y="373" width="0.6757%" height="15" fill="rgb(210,56,17)" fg:x="7200" fg:w="200"/><text x="24.3347%" y="383.50">alloc::slice::&lt;impl [T]&gt;:..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (200 samples, 0.68%)</title><rect x="24.3243%" y="357" width="0.6757%" height="15" fill="rgb(224,130,29)" fg:x="7200" fg:w="200"/><text x="24.3347%" y="367.50">&lt;T as alloc::slice::&lt;impl..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (100 samples, 0.34%)</title><rect x="24.6622%" y="341" width="0.3378%" height="15" fill="rgb(235,212,8)" fg:x="7300" fg:w="100"/><text x="24.6726%" y="351.50">core::ptr::..</text></g><g><title>core::ptr::copy_nonoverlapping (100 samples, 0.34%)</title><rect x="24.6622%" y="325" width="0.3378%" height="15" fill="rgb(223,33,50)" fg:x="7300" fg:w="100"/><text x="24.6726%" y="335.50">core::ptr::..</text></g><g><title>__memmove_avx_unaligned_erms (100 samples, 0.34%)</title><rect x="24.6622%" y="309" width="0.3378%" height="15" fill="rgb(219,149,13)" fg:x="7300" fg:w="100"/><text x="24.6726%" y="319.50">__memmove_a..</text></g><g><title>&lt;flare_internals::resource::rep::Expr as core::clone::Clone&gt;::clone (1,000 samples, 3.38%)</title><rect x="21.9595%" y="421" width="3.3784%" height="15" fill="rgb(250,156,29)" fg:x="6500" fg:w="1000"/><text x="21.9699%" y="431.50">&lt;flare_internals::resource::rep::Expr as core::clone::Clone&gt;::clone</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (100 samples, 0.34%)</title><rect x="25.0000%" y="405" width="0.3378%" height="15" fill="rgb(216,193,19)" fg:x="7400" fg:w="100"/><text x="25.0104%" y="415.50">&lt;alloc::vec..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (100 samples, 0.34%)</title><rect x="25.0000%" y="389" width="0.3378%" height="15" fill="rgb(216,135,14)" fg:x="7400" fg:w="100"/><text x="25.0104%" y="399.50">alloc::slic..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (100 samples, 0.34%)</title><rect x="25.0000%" y="373" width="0.3378%" height="15" fill="rgb(241,47,5)" fg:x="7400" fg:w="100"/><text x="25.0104%" y="383.50">&lt;T as alloc..</text></g><g><title>core::clone::Clone::clone (100 samples, 0.34%)</title><rect x="25.0000%" y="357" width="0.3378%" height="15" fill="rgb(233,42,35)" fg:x="7400" fg:w="100"/><text x="25.0104%" y="367.50">core::clone..</text></g><g><title>core::clone::Clone::clone (100 samples, 0.34%)</title><rect x="25.0000%" y="341" width="0.3378%" height="15" fill="rgb(231,13,6)" fg:x="7400" fg:w="100"/><text x="25.0104%" y="351.50">core::clone..</text></g><g><title>&lt;chumsky::span::SimpleSpan&lt;T,C&gt; as core::clone::Clone&gt;::clone (100 samples, 0.34%)</title><rect x="25.0000%" y="325" width="0.3378%" height="15" fill="rgb(207,181,40)" fg:x="7400" fg:w="100"/><text x="25.0104%" y="335.50">&lt;chumsky::s..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (100 samples, 0.34%)</title><rect x="25.0000%" y="309" width="0.3378%" height="15" fill="rgb(254,173,49)" fg:x="7400" fg:w="100"/><text x="25.0104%" y="319.50">core::clone..</text></g><g><title>&lt;flare_internals::resource::rep::Expr as core::fmt::Debug&gt;::fmt (100 samples, 0.34%)</title><rect x="25.3378%" y="421" width="0.3378%" height="15" fill="rgb(221,1,38)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="431.50">&lt;flare_inte..</text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (100 samples, 0.34%)</title><rect x="25.3378%" y="405" width="0.3378%" height="15" fill="rgb(206,124,46)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="415.50">core::fmt::..</text></g><g><title>core::fmt::builders::debug_tuple_new (100 samples, 0.34%)</title><rect x="25.3378%" y="389" width="0.3378%" height="15" fill="rgb(249,21,11)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="399.50">core::fmt::..</text></g><g><title>core::fmt::Formatter::write_str (100 samples, 0.34%)</title><rect x="25.3378%" y="373" width="0.3378%" height="15" fill="rgb(222,201,40)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="383.50">core::fmt::..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (100 samples, 0.34%)</title><rect x="25.3378%" y="357" width="0.3378%" height="15" fill="rgb(235,61,29)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="367.50">&lt;alloc::str..</text></g><g><title>alloc::string::String::push_str (100 samples, 0.34%)</title><rect x="25.3378%" y="341" width="0.3378%" height="15" fill="rgb(219,207,3)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="351.50">alloc::stri..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (100 samples, 0.34%)</title><rect x="25.3378%" y="325" width="0.3378%" height="15" fill="rgb(222,56,46)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="335.50">alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (100 samples, 0.34%)</title><rect x="25.3378%" y="309" width="0.3378%" height="15" fill="rgb(239,76,54)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="319.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (100 samples, 0.34%)</title><rect x="25.3378%" y="293" width="0.3378%" height="15" fill="rgb(231,124,27)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="303.50">alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (100 samples, 0.34%)</title><rect x="25.3378%" y="277" width="0.3378%" height="15" fill="rgb(249,195,6)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="287.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (100 samples, 0.34%)</title><rect x="25.3378%" y="261" width="0.3378%" height="15" fill="rgb(237,174,47)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="271.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (100 samples, 0.34%)</title><rect x="25.3378%" y="245" width="0.3378%" height="15" fill="rgb(206,201,31)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="255.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (100 samples, 0.34%)</title><rect x="25.3378%" y="229" width="0.3378%" height="15" fill="rgb(231,57,52)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="239.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (100 samples, 0.34%)</title><rect x="25.3378%" y="213" width="0.3378%" height="15" fill="rgb(248,177,22)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="223.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::finish_grow (100 samples, 0.34%)</title><rect x="25.3378%" y="197" width="0.3378%" height="15" fill="rgb(215,211,37)" fg:x="7500" fg:w="100"/><text x="25.3483%" y="207.50">alloc::raw_..</text></g><g><title>&lt;flare_internals::resource::rep::Ty as core::clone::Clone&gt;::clone (200 samples, 0.68%)</title><rect x="25.6757%" y="421" width="0.6757%" height="15" fill="rgb(241,128,51)" fg:x="7600" fg:w="200"/><text x="25.6861%" y="431.50">&lt;flare_internals::resourc..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (200 samples, 0.68%)</title><rect x="25.6757%" y="405" width="0.6757%" height="15" fill="rgb(227,165,31)" fg:x="7600" fg:w="200"/><text x="25.6861%" y="415.50">&lt;alloc::boxed::Box&lt;T,A&gt; a..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (200 samples, 0.68%)</title><rect x="25.6757%" y="389" width="0.6757%" height="15" fill="rgb(228,167,24)" fg:x="7600" fg:w="200"/><text x="25.6861%" y="399.50">alloc::boxed::Box&lt;T,A&gt;::n..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (200 samples, 0.68%)</title><rect x="25.6757%" y="373" width="0.6757%" height="15" fill="rgb(228,143,12)" fg:x="7600" fg:w="200"/><text x="25.6861%" y="383.50">alloc::boxed::Box&lt;T,A&gt;::t..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (200 samples, 0.68%)</title><rect x="25.6757%" y="357" width="0.6757%" height="15" fill="rgb(249,149,8)" fg:x="7600" fg:w="200"/><text x="25.6861%" y="367.50">&lt;alloc::alloc::Global as ..</text></g><g><title>alloc::alloc::Global::alloc_impl (200 samples, 0.68%)</title><rect x="25.6757%" y="341" width="0.6757%" height="15" fill="rgb(243,35,44)" fg:x="7600" fg:w="200"/><text x="25.6861%" y="351.50">alloc::alloc::Global::all..</text></g><g><title>alloc::alloc::alloc (200 samples, 0.68%)</title><rect x="25.6757%" y="325" width="0.6757%" height="15" fill="rgb(246,89,9)" fg:x="7600" fg:w="200"/><text x="25.6861%" y="335.50">alloc::alloc::alloc</text></g><g><title>__rustc::__rdl_alloc (200 samples, 0.68%)</title><rect x="25.6757%" y="309" width="0.6757%" height="15" fill="rgb(233,213,13)" fg:x="7600" fg:w="200"/><text x="25.6861%" y="319.50">__rustc::__rdl_alloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (200 samples, 0.68%)</title><rect x="25.6757%" y="293" width="0.6757%" height="15" fill="rgb(233,141,41)" fg:x="7600" fg:w="200"/><text x="25.6861%" y="303.50">std::sys::alloc::unix::&lt;i..</text></g><g><title>__GI___libc_malloc (200 samples, 0.68%)</title><rect x="25.6757%" y="277" width="0.6757%" height="15" fill="rgb(239,167,4)" fg:x="7600" fg:w="200"/><text x="25.6861%" y="287.50">__GI___libc_malloc</text></g><g><title>_int_malloc (200 samples, 0.68%)</title><rect x="25.6757%" y="261" width="0.6757%" height="15" fill="rgb(209,217,16)" fg:x="7600" fg:w="200"/><text x="25.6861%" y="271.50">_int_malloc</text></g><g><title>&lt;std::io::default_write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (100 samples, 0.34%)</title><rect x="26.3514%" y="421" width="0.3378%" height="15" fill="rgb(219,88,35)" fg:x="7800" fg:w="100"/><text x="26.3618%" y="431.50">&lt;std::io::d..</text></g><g><title>&lt;std::sys::fs::unix::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.34%)</title><rect x="26.6892%" y="421" width="0.3378%" height="15" fill="rgb(220,193,23)" fg:x="7900" fg:w="100"/><text x="26.6996%" y="431.50">&lt;std::sys::..</text></g><g><title>core::ffi::c_str::CStr::from_ptr (100 samples, 0.34%)</title><rect x="26.6892%" y="405" width="0.3378%" height="15" fill="rgb(230,90,52)" fg:x="7900" fg:w="100"/><text x="26.6996%" y="415.50">core::ffi::..</text></g><g><title>core::ffi::c_str::strlen (100 samples, 0.34%)</title><rect x="26.6892%" y="389" width="0.3378%" height="15" fill="rgb(252,106,19)" fg:x="7900" fg:w="100"/><text x="26.6996%" y="399.50">core::ffi::..</text></g><g><title>core::ffi::c_str::strlen::runtime (100 samples, 0.34%)</title><rect x="26.6892%" y="373" width="0.3378%" height="15" fill="rgb(206,74,20)" fg:x="7900" fg:w="100"/><text x="26.6996%" y="383.50">core::ffi::..</text></g><g><title>__strlen_avx2 (100 samples, 0.34%)</title><rect x="26.6892%" y="357" width="0.3378%" height="15" fill="rgb(230,138,44)" fg:x="7900" fg:w="100"/><text x="26.6996%" y="367.50">__strlen_av..</text></g><g><title>&lt;trie_rs::iter::postfix_iter::PostfixIter&lt;Label,Value,C,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (200 samples, 0.68%)</title><rect x="27.0270%" y="421" width="0.6757%" height="15" fill="rgb(235,182,43)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="431.50">&lt;trie_rs::iter::postfix_i..</text></g><g><title>trie_rs::try_collect::TryCollect::try_collect (200 samples, 0.68%)</title><rect x="27.0270%" y="405" width="0.6757%" height="15" fill="rgb(242,16,51)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="415.50">trie_rs::try_collect::Try..</text></g><g><title>&lt;S as trie_rs::try_collect::TryFromIterator&lt;A,trie_rs::try_collect::Collect&gt;&gt;::try_from_iter (200 samples, 0.68%)</title><rect x="27.0270%" y="389" width="0.6757%" height="15" fill="rgb(248,9,4)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="399.50">&lt;S as trie_rs::try_collec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (200 samples, 0.68%)</title><rect x="27.0270%" y="373" width="0.6757%" height="15" fill="rgb(210,31,22)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (200 samples, 0.68%)</title><rect x="27.0270%" y="357" width="0.6757%" height="15" fill="rgb(239,54,39)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (200 samples, 0.68%)</title><rect x="27.0270%" y="341" width="0.6757%" height="15" fill="rgb(230,99,41)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (200 samples, 0.68%)</title><rect x="27.0270%" y="325" width="0.6757%" height="15" fill="rgb(253,106,12)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="335.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (200 samples, 0.68%)</title><rect x="27.0270%" y="309" width="0.6757%" height="15" fill="rgb(213,46,41)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="319.50">alloc::vec::Vec&lt;T,A&gt;::ext..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (200 samples, 0.68%)</title><rect x="27.0270%" y="293" width="0.6757%" height="15" fill="rgb(215,133,35)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="303.50">core::iter::traits::itera..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (200 samples, 0.68%)</title><rect x="27.0270%" y="277" width="0.6757%" height="15" fill="rgb(213,28,5)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="287.50">&lt;core::iter::adapters::cl..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (200 samples, 0.68%)</title><rect x="27.0270%" y="261" width="0.6757%" height="15" fill="rgb(215,77,49)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="271.50">&lt;core::iter::adapters::ma..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (200 samples, 0.68%)</title><rect x="27.0270%" y="245" width="0.6757%" height="15" fill="rgb(248,100,22)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="255.50">&lt;core::iter::adapters::cl..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (200 samples, 0.68%)</title><rect x="27.0270%" y="229" width="0.6757%" height="15" fill="rgb(208,67,9)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="239.50">&lt;core::iter::adapters::ma..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (200 samples, 0.68%)</title><rect x="27.0270%" y="213" width="0.6757%" height="15" fill="rgb(219,133,21)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="223.50">&lt;core::slice::iter::Iter&lt;..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (200 samples, 0.68%)</title><rect x="27.0270%" y="197" width="0.6757%" height="15" fill="rgb(246,46,29)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="207.50">core::iter::adapters::map..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (200 samples, 0.68%)</title><rect x="27.0270%" y="181" width="0.6757%" height="15" fill="rgb(246,185,52)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="191.50">core::iter::adapters::map..</text></g><g><title>core::ops::function::FnMut::call_mut (200 samples, 0.68%)</title><rect x="27.0270%" y="165" width="0.6757%" height="15" fill="rgb(252,136,11)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="175.50">core::ops::function::FnMu..</text></g><g><title>&lt;flare_internals::passes::midend::environment::SimpleQuant as core::clone::Clone&gt;::clone (200 samples, 0.68%)</title><rect x="27.0270%" y="149" width="0.6757%" height="15" fill="rgb(219,138,53)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="159.50">&lt;flare_internals::passes:..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (200 samples, 0.68%)</title><rect x="27.0270%" y="133" width="0.6757%" height="15" fill="rgb(211,51,23)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="143.50">&lt;alloc::string::String as..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (200 samples, 0.68%)</title><rect x="27.0270%" y="117" width="0.6757%" height="15" fill="rgb(247,221,28)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="127.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (200 samples, 0.68%)</title><rect x="27.0270%" y="101" width="0.6757%" height="15" fill="rgb(251,222,45)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="111.50">alloc::slice::&lt;impl [T]&gt;:..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (200 samples, 0.68%)</title><rect x="27.0270%" y="85" width="0.6757%" height="15" fill="rgb(217,162,53)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="95.50">&lt;T as alloc::slice::&lt;impl..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (200 samples, 0.68%)</title><rect x="27.0270%" y="69" width="0.6757%" height="15" fill="rgb(229,93,14)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="79.50">core::ptr::const_ptr::&lt;im..</text></g><g><title>core::ptr::copy_nonoverlapping (200 samples, 0.68%)</title><rect x="27.0270%" y="53" width="0.6757%" height="15" fill="rgb(209,67,49)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="63.50">core::ptr::copy_nonoverla..</text></g><g><title>__memmove_avx_unaligned_erms (200 samples, 0.68%)</title><rect x="27.0270%" y="37" width="0.6757%" height="15" fill="rgb(213,87,29)" fg:x="8000" fg:w="200"/><text x="27.0374%" y="47.50">__memmove_avx_unaligned_e..</text></g><g><title>[anon] (100 samples, 0.34%)</title><rect x="27.7027%" y="421" width="0.3378%" height="15" fill="rgb(205,151,52)" fg:x="8200" fg:w="100"/><text x="27.7131%" y="431.50">[anon]</text></g><g><title>flare_internals::resource::rep::Ty::get_arrow (100 samples, 0.34%)</title><rect x="27.7027%" y="405" width="0.3378%" height="15" fill="rgb(253,215,39)" fg:x="8200" fg:w="100"/><text x="27.7131%" y="415.50">flare_inter..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (100 samples, 0.34%)</title><rect x="27.7027%" y="389" width="0.3378%" height="15" fill="rgb(221,220,41)" fg:x="8200" fg:w="100"/><text x="27.7131%" y="399.50">&lt;alloc::box..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (100 samples, 0.34%)</title><rect x="27.7027%" y="373" width="0.3378%" height="15" fill="rgb(218,133,21)" fg:x="8200" fg:w="100"/><text x="27.7131%" y="383.50">alloc::boxe..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (100 samples, 0.34%)</title><rect x="27.7027%" y="357" width="0.3378%" height="15" fill="rgb(221,193,43)" fg:x="8200" fg:w="100"/><text x="27.7131%" y="367.50">alloc::boxe..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.34%)</title><rect x="27.7027%" y="341" width="0.3378%" height="15" fill="rgb(240,128,52)" fg:x="8200" fg:w="100"/><text x="27.7131%" y="351.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.34%)</title><rect x="27.7027%" y="325" width="0.3378%" height="15" fill="rgb(253,114,12)" fg:x="8200" fg:w="100"/><text x="27.7131%" y="335.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (100 samples, 0.34%)</title><rect x="27.7027%" y="309" width="0.3378%" height="15" fill="rgb(215,223,47)" fg:x="8200" fg:w="100"/><text x="27.7131%" y="319.50">alloc::allo..</text></g><g><title>__rustc::__rdl_alloc (100 samples, 0.34%)</title><rect x="27.7027%" y="293" width="0.3378%" height="15" fill="rgb(248,225,23)" fg:x="8200" fg:w="100"/><text x="27.7131%" y="303.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.34%)</title><rect x="27.7027%" y="277" width="0.3378%" height="15" fill="rgb(250,108,0)" fg:x="8200" fg:w="100"/><text x="27.7131%" y="287.50">std::sys::a..</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="27.7027%" y="261" width="0.3378%" height="15" fill="rgb(228,208,7)" fg:x="8200" fg:w="100"/><text x="27.7131%" y="271.50">__GI___libc..</text></g><g><title>&lt;chumsky::primitive::Choice&lt;(Q_,R_,S_,T_,U_,V_,W_,X_,Y_,Z_)&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (200 samples, 0.68%)</title><rect x="28.0405%" y="405" width="0.6757%" height="15" fill="rgb(244,45,10)" fg:x="8300" fg:w="200"/><text x="28.0510%" y="415.50">&lt;chumsky::primitive::Choi..</text></g><g><title>&lt;chumsky::combinator::MapWith&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (200 samples, 0.68%)</title><rect x="28.0405%" y="389" width="0.6757%" height="15" fill="rgb(207,125,25)" fg:x="8300" fg:w="200"/><text x="28.0510%" y="399.50">&lt;chumsky::combinator::Map..</text></g><g><title>&lt;chumsky::primitive::SelectRef&lt;F,I,O,E&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (200 samples, 0.68%)</title><rect x="28.0405%" y="373" width="0.6757%" height="15" fill="rgb(210,195,18)" fg:x="8300" fg:w="200"/><text x="28.0510%" y="383.50">&lt;chumsky::primitive::Sele..</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::next_ref_inner (200 samples, 0.68%)</title><rect x="28.0405%" y="357" width="0.6757%" height="15" fill="rgb(249,80,12)" fg:x="8300" fg:w="200"/><text x="28.0510%" y="367.50">chumsky::input::InputRef&lt;..</text></g><g><title>&lt;chumsky::input::MappedInput&lt;T,S,I,F&gt; as chumsky::input::BorrowInput&gt;::next_ref (200 samples, 0.68%)</title><rect x="28.0405%" y="341" width="0.6757%" height="15" fill="rgb(221,65,9)" fg:x="8300" fg:w="200"/><text x="28.0510%" y="351.50">&lt;chumsky::input::MappedIn..</text></g><g><title>core::option::Option&lt;T&gt;::map (200 samples, 0.68%)</title><rect x="28.0405%" y="325" width="0.6757%" height="15" fill="rgb(235,49,36)" fg:x="8300" fg:w="200"/><text x="28.0510%" y="335.50">core::option::Option&lt;T&gt;::..</text></g><g><title>&lt;chumsky::input::MappedInput&lt;T,S,I,F&gt; as chumsky::input::BorrowInput&gt;::next_ref::{{closure}} (200 samples, 0.68%)</title><rect x="28.0405%" y="309" width="0.6757%" height="15" fill="rgb(225,32,20)" fg:x="8300" fg:w="200"/><text x="28.0510%" y="319.50">&lt;chumsky::input::MappedIn..</text></g><g><title>&lt;chumsky::primitive::Choice&lt;(W_,X_,Y_,Z_)&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="28.7162%" y="405" width="0.3378%" height="15" fill="rgb(215,141,46)" fg:x="8500" fg:w="100"/><text x="28.7266%" y="415.50">&lt;chumsky::p..</text></g><g><title>&lt;chumsky::combinator::MapWith&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="28.7162%" y="389" width="0.3378%" height="15" fill="rgb(250,160,47)" fg:x="8500" fg:w="100"/><text x="28.7266%" y="399.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::private::Emit as chumsky::private::Mode&gt;::map (100 samples, 0.34%)</title><rect x="28.7162%" y="373" width="0.3378%" height="15" fill="rgb(216,222,40)" fg:x="8500" fg:w="100"/><text x="28.7266%" y="383.50">&lt;chumsky::p..</text></g><g><title>&lt;chumsky::combinator::MapWith&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go::{{closure}} (100 samples, 0.34%)</title><rect x="28.7162%" y="357" width="0.3378%" height="15" fill="rgb(234,217,39)" fg:x="8500" fg:w="100"/><text x="28.7266%" y="367.50">&lt;chumsky::c..</text></g><g><title>flare_internals::passes::parser::parser::{{closure}}::{{closure}} (100 samples, 0.34%)</title><rect x="28.7162%" y="341" width="0.3378%" height="15" fill="rgb(207,178,40)" fg:x="8500" fg:w="100"/><text x="28.7266%" y="351.50">flare_inter..</text></g><g><title>core::ptr::drop_in_place&lt;(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;)&gt; (100 samples, 0.34%)</title><rect x="28.7162%" y="325" width="0.3378%" height="15" fill="rgb(221,136,13)" fg:x="8500" fg:w="100"/><text x="28.7266%" y="335.50">core::ptr::..</text></g><g><title>_int_free (100 samples, 0.34%)</title><rect x="28.7162%" y="309" width="0.3378%" height="15" fill="rgb(249,199,10)" fg:x="8500" fg:w="100"/><text x="28.7266%" y="319.50">_int_free</text></g><g><title>&lt;trie_rs::iter::postfix_iter::PostfixIter&lt;Label,Value,C,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.34%)</title><rect x="29.0541%" y="405" width="0.3378%" height="15" fill="rgb(249,222,13)" fg:x="8600" fg:w="100"/><text x="29.0645%" y="415.50">&lt;trie_rs::i..</text></g><g><title>trie_rs::map::trie::&lt;impl trie_rs::map::Trie&lt;Label,Value&gt;&gt;::value (100 samples, 0.34%)</title><rect x="29.0541%" y="389" width="0.3378%" height="15" fill="rgb(244,185,38)" fg:x="8600" fg:w="100"/><text x="29.0645%" y="399.50">trie_rs::ma..</text></g><g><title>core::option::Option&lt;T&gt;::as_ref (100 samples, 0.34%)</title><rect x="29.0541%" y="373" width="0.3378%" height="15" fill="rgb(236,202,9)" fg:x="8600" fg:w="100"/><text x="29.0645%" y="383.50">core::optio..</text></g><g><title>fid_rs::fid::fid_impl::&lt;impl core::ops::index::Index&lt;u64&gt; for fid_rs::fid::Fid&gt;::index (100 samples, 0.34%)</title><rect x="29.3919%" y="405" width="0.3378%" height="15" fill="rgb(250,229,37)" fg:x="8700" fg:w="100"/><text x="29.4023%" y="415.50">fid_rs::fid..</text></g><g><title>fid_rs::internal_data_structure::raw_bit_vector::RawBitVector::access (100 samples, 0.34%)</title><rect x="29.3919%" y="389" width="0.3378%" height="15" fill="rgb(206,174,23)" fg:x="8700" fg:w="100"/><text x="29.4023%" y="399.50">fid_rs::int..</text></g><g><title>flare_internals::resource::rep::Expr::get_ident (100 samples, 0.34%)</title><rect x="29.7297%" y="405" width="0.3378%" height="15" fill="rgb(211,33,43)" fg:x="8800" fg:w="100"/><text x="29.7401%" y="415.50">flare_inter..</text></g><g><title>[unknown] (700 samples, 2.36%)</title><rect x="28.0405%" y="421" width="2.3649%" height="15" fill="rgb(245,58,50)" fg:x="8300" fg:w="700"/><text x="28.0510%" y="431.50">[unknown]</text></g><g><title>rayon_core::registry::Registry::in_worker_cold (100 samples, 0.34%)</title><rect x="30.0676%" y="405" width="0.3378%" height="15" fill="rgb(244,68,36)" fg:x="8900" fg:w="100"/><text x="30.0780%" y="415.50">rayon_core:..</text></g><g><title>_dl_start_user (200 samples, 0.68%)</title><rect x="30.4054%" y="421" width="0.6757%" height="15" fill="rgb(232,229,15)" fg:x="9000" fg:w="200"/><text x="30.4158%" y="431.50">_dl_start_user</text></g><g><title>_dl_init (200 samples, 0.68%)</title><rect x="30.4054%" y="405" width="0.6757%" height="15" fill="rgb(254,30,23)" fg:x="9000" fg:w="200"/><text x="30.4158%" y="415.50">_dl_init</text></g><g><title>call_init.part.0 (200 samples, 0.68%)</title><rect x="30.4054%" y="389" width="0.6757%" height="15" fill="rgb(235,160,14)" fg:x="9000" fg:w="200"/><text x="30.4158%" y="399.50">call_init.part.0</text></g><g><title>__cpu_indicator_init (200 samples, 0.68%)</title><rect x="30.4054%" y="373" width="0.6757%" height="15" fill="rgb(212,155,44)" fg:x="9000" fg:w="200"/><text x="30.4158%" y="383.50">__cpu_indicator_init</text></g><g><title>__GI___tunables_init (200 samples, 0.68%)</title><rect x="31.4189%" y="373" width="0.6757%" height="15" fill="rgb(226,2,50)" fg:x="9300" fg:w="200"/><text x="31.4293%" y="383.50">__GI___tunables_init</text></g><g><title>_dl_lookup_symbol_x (100 samples, 0.34%)</title><rect x="32.4324%" y="357" width="0.3378%" height="15" fill="rgb(234,177,6)" fg:x="9600" fg:w="100"/><text x="32.4428%" y="367.50">_dl_lookup_..</text></g><g><title>_dl_map_object_from_fd (200 samples, 0.68%)</title><rect x="33.1081%" y="293" width="0.6757%" height="15" fill="rgb(217,24,9)" fg:x="9800" fg:w="200"/><text x="33.1185%" y="303.50">_dl_map_object_from_fd</text></g><g><title>_dl_new_object (100 samples, 0.34%)</title><rect x="33.4459%" y="277" width="0.3378%" height="15" fill="rgb(220,13,46)" fg:x="9900" fg:w="100"/><text x="33.4564%" y="287.50">_dl_new_obj..</text></g><g><title>strlen (100 samples, 0.34%)</title><rect x="33.4459%" y="261" width="0.3378%" height="15" fill="rgb(239,221,27)" fg:x="9900" fg:w="100"/><text x="33.4564%" y="271.50">strlen</text></g><g><title>_dl_map_object_deps (400 samples, 1.35%)</title><rect x="32.7703%" y="357" width="1.3514%" height="15" fill="rgb(222,198,25)" fg:x="9700" fg:w="400"/><text x="32.7807%" y="367.50">_dl_map_object_deps</text></g><g><title>_dl_catch_exception (300 samples, 1.01%)</title><rect x="33.1081%" y="341" width="1.0135%" height="15" fill="rgb(211,99,13)" fg:x="9800" fg:w="300"/><text x="33.1185%" y="351.50">_dl_catch_exception</text></g><g><title>openaux (300 samples, 1.01%)</title><rect x="33.1081%" y="325" width="1.0135%" height="15" fill="rgb(232,111,31)" fg:x="9800" fg:w="300"/><text x="33.1185%" y="335.50">openaux</text></g><g><title>_dl_map_object (300 samples, 1.01%)</title><rect x="33.1081%" y="309" width="1.0135%" height="15" fill="rgb(245,82,37)" fg:x="9800" fg:w="300"/><text x="33.1185%" y="319.50">_dl_map_object</text></g><g><title>open_path (100 samples, 0.34%)</title><rect x="33.7838%" y="293" width="0.3378%" height="15" fill="rgb(227,149,46)" fg:x="10000" fg:w="100"/><text x="33.7942%" y="303.50">open_path</text></g><g><title>_dl_receive_error (100 samples, 0.34%)</title><rect x="34.1216%" y="357" width="0.3378%" height="15" fill="rgb(218,36,50)" fg:x="10100" fg:w="100"/><text x="34.1320%" y="367.50">_dl_receive..</text></g><g><title>version_check_doit (100 samples, 0.34%)</title><rect x="34.1216%" y="341" width="0.3378%" height="15" fill="rgb(226,80,48)" fg:x="10100" fg:w="100"/><text x="34.1320%" y="351.50">version_che..</text></g><g><title>_dl_check_all_versions (100 samples, 0.34%)</title><rect x="34.1216%" y="325" width="0.3378%" height="15" fill="rgb(238,224,15)" fg:x="10100" fg:w="100"/><text x="34.1320%" y="335.50">_dl_check_a..</text></g><g><title>_dl_check_map_versions (100 samples, 0.34%)</title><rect x="34.1216%" y="309" width="0.3378%" height="15" fill="rgb(241,136,10)" fg:x="10100" fg:w="100"/><text x="34.1320%" y="319.50">_dl_check_m..</text></g><g><title>_dl_name_match_p (100 samples, 0.34%)</title><rect x="34.1216%" y="293" width="0.3378%" height="15" fill="rgb(208,32,45)" fg:x="10100" fg:w="100"/><text x="34.1320%" y="303.50">_dl_name_ma..</text></g><g><title>strcmp (100 samples, 0.34%)</title><rect x="34.1216%" y="277" width="0.3378%" height="15" fill="rgb(207,135,9)" fg:x="10100" fg:w="100"/><text x="34.1320%" y="287.50">strcmp</text></g><g><title>_dl_relocate_object (1,000 samples, 3.38%)</title><rect x="34.4595%" y="357" width="3.3784%" height="15" fill="rgb(206,86,44)" fg:x="10200" fg:w="1000"/><text x="34.4699%" y="367.50">_dl_relocate_object</text></g><g><title>_dl_lookup_symbol_x (900 samples, 3.04%)</title><rect x="34.7973%" y="341" width="3.0405%" height="15" fill="rgb(245,177,15)" fg:x="10300" fg:w="900"/><text x="34.8077%" y="351.50">_dl_lookup_symbol_x</text></g><g><title>do_lookup_x (600 samples, 2.03%)</title><rect x="35.8108%" y="325" width="2.0270%" height="15" fill="rgb(206,64,50)" fg:x="10600" fg:w="600"/><text x="35.8212%" y="335.50">do_lookup_x</text></g><g><title>check_match (300 samples, 1.01%)</title><rect x="36.8243%" y="309" width="1.0135%" height="15" fill="rgb(234,36,40)" fg:x="10900" fg:w="300"/><text x="36.8347%" y="319.50">check_match</text></g><g><title>dl_main (1,800 samples, 6.08%)</title><rect x="32.0946%" y="373" width="6.0811%" height="15" fill="rgb(213,64,8)" fg:x="9500" fg:w="1800"/><text x="32.1050%" y="383.50">dl_main</text></g><g><title>init_tls (100 samples, 0.34%)</title><rect x="37.8378%" y="357" width="0.3378%" height="15" fill="rgb(210,75,36)" fg:x="11200" fg:w="100"/><text x="37.8483%" y="367.50">init_tls</text></g><g><title>_start (2,300 samples, 7.77%)</title><rect x="31.0811%" y="421" width="7.7703%" height="15" fill="rgb(229,88,21)" fg:x="9200" fg:w="2300"/><text x="31.0915%" y="431.50">_start</text></g><g><title>_dl_start (2,300 samples, 7.77%)</title><rect x="31.0811%" y="405" width="7.7703%" height="15" fill="rgb(252,204,47)" fg:x="9200" fg:w="2300"/><text x="31.0915%" y="415.50">_dl_start</text></g><g><title>_dl_sysdep_start (2,300 samples, 7.77%)</title><rect x="31.0811%" y="389" width="7.7703%" height="15" fill="rgb(208,77,27)" fg:x="9200" fg:w="2300"/><text x="31.0915%" y="399.50">_dl_sysdep_start</text></g><g><title>get_common_indices.constprop.0 (200 samples, 0.68%)</title><rect x="38.1757%" y="373" width="0.6757%" height="15" fill="rgb(221,76,26)" fg:x="11300" fg:w="200"/><text x="38.1861%" y="383.50">get_common_indices.constp..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (200 samples, 0.68%)</title><rect x="38.8514%" y="421" width="0.6757%" height="15" fill="rgb(225,139,18)" fg:x="11500" fg:w="200"/><text x="38.8618%" y="431.50">alloc::raw_vec::RawVec&lt;T,..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (100 samples, 0.34%)</title><rect x="39.1892%" y="405" width="0.3378%" height="15" fill="rgb(230,137,11)" fg:x="11600" fg:w="100"/><text x="39.1996%" y="415.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (100 samples, 0.34%)</title><rect x="39.1892%" y="389" width="0.3378%" height="15" fill="rgb(212,28,1)" fg:x="11600" fg:w="100"/><text x="39.1996%" y="399.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (100 samples, 0.34%)</title><rect x="39.1892%" y="373" width="0.3378%" height="15" fill="rgb(248,164,17)" fg:x="11600" fg:w="100"/><text x="39.1996%" y="383.50">alloc::raw_..</text></g><g><title>__memmove_avx_unaligned_erms (300 samples, 1.01%)</title><rect x="40.5405%" y="293" width="1.0135%" height="15" fill="rgb(222,171,42)" fg:x="12000" fg:w="300"/><text x="40.5510%" y="303.50">__memmove_avx_unaligned_erms</text></g><g><title>_int_free (200 samples, 0.68%)</title><rect x="41.5541%" y="293" width="0.6757%" height="15" fill="rgb(243,84,45)" fg:x="12300" fg:w="200"/><text x="41.5645%" y="303.50">_int_free</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,400 samples, 4.73%)</title><rect x="39.5270%" y="405" width="4.7297%" height="15" fill="rgb(252,49,23)" fg:x="11700" fg:w="1400"/><text x="39.5374%" y="415.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow</text></g><g><title>alloc::alloc::Global::grow_impl (1,400 samples, 4.73%)</title><rect x="39.5270%" y="389" width="4.7297%" height="15" fill="rgb(215,19,7)" fg:x="11700" fg:w="1400"/><text x="39.5374%" y="399.50">alloc::alloc::Global::grow_impl</text></g><g><title>alloc::alloc::realloc (1,400 samples, 4.73%)</title><rect x="39.5270%" y="373" width="4.7297%" height="15" fill="rgb(238,81,41)" fg:x="11700" fg:w="1400"/><text x="39.5374%" y="383.50">alloc::alloc::realloc</text></g><g><title>__rustc::__rdl_realloc (1,400 samples, 4.73%)</title><rect x="39.5270%" y="357" width="4.7297%" height="15" fill="rgb(210,199,37)" fg:x="11700" fg:w="1400"/><text x="39.5374%" y="367.50">__rustc::__rdl_realloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1,400 samples, 4.73%)</title><rect x="39.5270%" y="341" width="4.7297%" height="15" fill="rgb(244,192,49)" fg:x="11700" fg:w="1400"/><text x="39.5374%" y="351.50">std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc</text></g><g><title>__GI___libc_realloc (1,400 samples, 4.73%)</title><rect x="39.5270%" y="325" width="4.7297%" height="15" fill="rgb(226,211,11)" fg:x="11700" fg:w="1400"/><text x="39.5374%" y="335.50">__GI___libc_realloc</text></g><g><title>_int_realloc (1,200 samples, 4.05%)</title><rect x="40.2027%" y="309" width="4.0541%" height="15" fill="rgb(236,162,54)" fg:x="11900" fg:w="1200"/><text x="40.2131%" y="319.50">_int_realloc</text></g><g><title>_int_malloc (600 samples, 2.03%)</title><rect x="42.2297%" y="293" width="2.0270%" height="15" fill="rgb(220,229,9)" fg:x="12500" fg:w="600"/><text x="42.2401%" y="303.50">_int_malloc</text></g><g><title>alloc::raw_vec::finish_grow (1,500 samples, 5.07%)</title><rect x="39.5270%" y="421" width="5.0676%" height="15" fill="rgb(250,87,22)" fg:x="11700" fg:w="1500"/><text x="39.5374%" y="431.50">alloc::raw_vec::finish_grow</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="44.2568%" y="405" width="0.3378%" height="15" fill="rgb(239,43,17)" fg:x="13100" fg:w="100"/><text x="44.2672%" y="415.50">__GI___libc..</text></g><g><title>_int_malloc (100 samples, 0.34%)</title><rect x="44.2568%" y="389" width="0.3378%" height="15" fill="rgb(231,177,25)" fg:x="13100" fg:w="100"/><text x="44.2672%" y="399.50">_int_malloc</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (300 samples, 1.01%)</title><rect x="45.2703%" y="389" width="1.0135%" height="15" fill="rgb(219,179,1)" fg:x="13400" fg:w="300"/><text x="45.2807%" y="399.50">alloc::boxed::Box&lt;T&gt;::new</text></g><g><title>alloc::alloc::exchange_malloc (300 samples, 1.01%)</title><rect x="45.2703%" y="373" width="1.0135%" height="15" fill="rgb(238,219,53)" fg:x="13400" fg:w="300"/><text x="45.2807%" y="383.50">alloc::alloc::exchange_malloc</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (300 samples, 1.01%)</title><rect x="45.2703%" y="357" width="1.0135%" height="15" fill="rgb(232,167,36)" fg:x="13400" fg:w="300"/><text x="45.2807%" y="367.50">&lt;alloc::alloc::Global as core::alloc::A..</text></g><g><title>alloc::alloc::Global::alloc_impl (300 samples, 1.01%)</title><rect x="45.2703%" y="341" width="1.0135%" height="15" fill="rgb(244,19,51)" fg:x="13400" fg:w="300"/><text x="45.2807%" y="351.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (300 samples, 1.01%)</title><rect x="45.2703%" y="325" width="1.0135%" height="15" fill="rgb(224,6,22)" fg:x="13400" fg:w="300"/><text x="45.2807%" y="335.50">alloc::alloc::alloc</text></g><g><title>__rustc::__rdl_alloc (300 samples, 1.01%)</title><rect x="45.2703%" y="309" width="1.0135%" height="15" fill="rgb(224,145,5)" fg:x="13400" fg:w="300"/><text x="45.2807%" y="319.50">__rustc::__rdl_alloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (300 samples, 1.01%)</title><rect x="45.2703%" y="293" width="1.0135%" height="15" fill="rgb(234,130,49)" fg:x="13400" fg:w="300"/><text x="45.2807%" y="303.50">std::sys::alloc::unix::&lt;impl core::allo..</text></g><g><title>__GI___libc_malloc (300 samples, 1.01%)</title><rect x="45.2703%" y="277" width="1.0135%" height="15" fill="rgb(254,6,2)" fg:x="13400" fg:w="300"/><text x="45.2807%" y="287.50">__GI___libc_malloc</text></g><g><title>_int_malloc (200 samples, 0.68%)</title><rect x="45.6081%" y="261" width="0.6757%" height="15" fill="rgb(208,96,46)" fg:x="13500" fg:w="200"/><text x="45.6185%" y="271.50">_int_malloc</text></g><g><title>&lt;chumsky::error::Rich&lt;&lt;I as chumsky::input::Input&gt;::Token,&lt;I as chumsky::input::Input&gt;::Span&gt; as chumsky::label::LabelError&lt;I,L&gt;&gt;::expected_found (700 samples, 2.36%)</title><rect x="45.2703%" y="405" width="2.3649%" height="15" fill="rgb(239,3,39)" fg:x="13400" fg:w="700"/><text x="45.2807%" y="415.50">&lt;chumsky::error::Rich&lt;&lt;I as chumsky::input::Input&gt;::Token,&lt;I as chumsky::input::Input&gt;::Span&gt; ..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (400 samples, 1.35%)</title><rect x="46.2838%" y="389" width="1.3514%" height="15" fill="rgb(233,210,1)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="399.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (400 samples, 1.35%)</title><rect x="46.2838%" y="373" width="1.3514%" height="15" fill="rgb(244,137,37)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (400 samples, 1.35%)</title><rect x="46.2838%" y="357" width="1.3514%" height="15" fill="rgb(240,136,2)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::S..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (400 samples, 1.35%)</title><rect x="46.2838%" y="341" width="1.3514%" height="15" fill="rgb(239,18,37)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_ne..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (400 samples, 1.35%)</title><rect x="46.2838%" y="325" width="1.3514%" height="15" fill="rgb(218,185,22)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="335.50">alloc::vec::Vec&lt;T&gt;::with_capacity</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (400 samples, 1.35%)</title><rect x="46.2838%" y="309" width="1.3514%" height="15" fill="rgb(225,218,4)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="319.50">alloc::vec::Vec&lt;T,A&gt;::with_capacity_in</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (400 samples, 1.35%)</title><rect x="46.2838%" y="293" width="1.3514%" height="15" fill="rgb(230,182,32)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="303.50">alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (400 samples, 1.35%)</title><rect x="46.2838%" y="277" width="1.3514%" height="15" fill="rgb(242,56,43)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="287.50">alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (400 samples, 1.35%)</title><rect x="46.2838%" y="261" width="1.3514%" height="15" fill="rgb(233,99,24)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="271.50">alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (400 samples, 1.35%)</title><rect x="46.2838%" y="245" width="1.3514%" height="15" fill="rgb(234,209,42)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="255.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::al..</text></g><g><title>alloc::alloc::Global::alloc_impl (400 samples, 1.35%)</title><rect x="46.2838%" y="229" width="1.3514%" height="15" fill="rgb(227,7,12)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="239.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (400 samples, 1.35%)</title><rect x="46.2838%" y="213" width="1.3514%" height="15" fill="rgb(245,203,43)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="223.50">alloc::alloc::alloc</text></g><g><title>__rustc::__rdl_alloc (400 samples, 1.35%)</title><rect x="46.2838%" y="197" width="1.3514%" height="15" fill="rgb(238,205,33)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="207.50">__rustc::__rdl_alloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (400 samples, 1.35%)</title><rect x="46.2838%" y="181" width="1.3514%" height="15" fill="rgb(231,56,7)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="191.50">std::sys::alloc::unix::&lt;impl core::alloc::global::Gl..</text></g><g><title>__GI___libc_malloc (400 samples, 1.35%)</title><rect x="46.2838%" y="165" width="1.3514%" height="15" fill="rgb(244,186,29)" fg:x="13700" fg:w="400"/><text x="46.2942%" y="175.50">__GI___libc_malloc</text></g><g><title>_int_malloc (100 samples, 0.34%)</title><rect x="47.2973%" y="149" width="0.3378%" height="15" fill="rgb(234,111,31)" fg:x="14000" fg:w="100"/><text x="47.3077%" y="159.50">_int_malloc</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (100 samples, 0.34%)</title><rect x="47.6351%" y="389" width="0.3378%" height="15" fill="rgb(241,149,10)" fg:x="14100" fg:w="100"/><text x="47.6456%" y="399.50">&lt;T as core:..</text></g><g><title>&lt;chumsky::error::RichPattern&lt;T&gt; as core::convert::From&lt;chumsky::DefaultExpected&lt;T&gt;&gt;&gt;::from (100 samples, 0.34%)</title><rect x="47.6351%" y="373" width="0.3378%" height="15" fill="rgb(249,206,44)" fg:x="14100" fg:w="100"/><text x="47.6456%" y="383.50">&lt;chumsky::e..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (100 samples, 0.34%)</title><rect x="47.9730%" y="389" width="0.3378%" height="15" fill="rgb(251,153,30)" fg:x="14200" fg:w="100"/><text x="47.9834%" y="399.50">alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (100 samples, 0.34%)</title><rect x="47.9730%" y="373" width="0.3378%" height="15" fill="rgb(239,152,38)" fg:x="14200" fg:w="100"/><text x="47.9834%" y="383.50">alloc::vec:..</text></g><g><title>core::ptr::write (100 samples, 0.34%)</title><rect x="47.9730%" y="357" width="0.3378%" height="15" fill="rgb(249,139,47)" fg:x="14200" fg:w="100"/><text x="47.9834%" y="367.50">core::ptr::..</text></g><g><title>&lt;chumsky::error::Rich&lt;&lt;I as chumsky::input::Input&gt;::Token,&lt;I as chumsky::input::Input&gt;::Span&gt; as chumsky::label::LabelError&lt;I,L&gt;&gt;::merge_expected_found (500 samples, 1.69%)</title><rect x="47.6351%" y="405" width="1.6892%" height="15" fill="rgb(244,64,35)" fg:x="14100" fg:w="500"/><text x="47.6456%" y="415.50">&lt;chumsky::error::Rich&lt;&lt;I as chumsky::input::Input&gt;::Token,&lt;I as ch..</text></g><g><title>core::option::Option&lt;T&gt;::or (300 samples, 1.01%)</title><rect x="48.3108%" y="389" width="1.0135%" height="15" fill="rgb(216,46,15)" fg:x="14300" fg:w="300"/><text x="48.3212%" y="399.50">core::option::Option&lt;T&gt;::or</text></g><g><title>&lt;chumsky::error::Rich&lt;&lt;I as chumsky::input::Input&gt;::Token,&lt;I as chumsky::input::Input&gt;::Span&gt; as chumsky::label::LabelError&lt;I,L&gt;&gt;::replace_expected_found (200 samples, 0.68%)</title><rect x="49.3243%" y="405" width="0.6757%" height="15" fill="rgb(250,74,19)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="415.50">&lt;chumsky::error::Rich&lt;&lt;I ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (200 samples, 0.68%)</title><rect x="49.3243%" y="389" width="0.6757%" height="15" fill="rgb(249,42,33)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="399.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (200 samples, 0.68%)</title><rect x="49.3243%" y="373" width="0.6757%" height="15" fill="rgb(242,149,17)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="383.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (200 samples, 0.68%)</title><rect x="49.3243%" y="357" width="0.6757%" height="15" fill="rgb(244,29,21)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="367.50">alloc::vec::Vec&lt;T,A&gt;::ext..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (200 samples, 0.68%)</title><rect x="49.3243%" y="341" width="0.6757%" height="15" fill="rgb(220,130,37)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="351.50">core::iter::traits::itera..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (200 samples, 0.68%)</title><rect x="49.3243%" y="325" width="0.6757%" height="15" fill="rgb(211,67,2)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="335.50">&lt;core::iter::adapters::ma..</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (200 samples, 0.68%)</title><rect x="49.3243%" y="309" width="0.6757%" height="15" fill="rgb(235,68,52)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="319.50">&lt;core::array::iter::IntoI..</text></g><g><title>core::array::iter::iter_inner::PolymorphicIter&lt;[core::mem::maybe_uninit::MaybeUninit&lt;T&gt;]&gt;::fold (200 samples, 0.68%)</title><rect x="49.3243%" y="293" width="0.6757%" height="15" fill="rgb(246,142,3)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="303.50">core::array::iter::iter_i..</text></g><g><title>core::array::iter::iter_inner::PolymorphicIter&lt;[core::mem::maybe_uninit::MaybeUninit&lt;T&gt;]&gt;::try_fold (200 samples, 0.68%)</title><rect x="49.3243%" y="277" width="0.6757%" height="15" fill="rgb(241,25,7)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="287.50">core::array::iter::iter_i..</text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::try_fold (200 samples, 0.68%)</title><rect x="49.3243%" y="261" width="0.6757%" height="15" fill="rgb(242,119,39)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="271.50">&lt;core::ops::index_range::..</text></g><g><title>core::array::iter::iter_inner::PolymorphicIter&lt;[core::mem::maybe_uninit::MaybeUninit&lt;T&gt;]&gt;::try_fold::{{closure}} (200 samples, 0.68%)</title><rect x="49.3243%" y="245" width="0.6757%" height="15" fill="rgb(241,98,45)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="255.50">core::array::iter::iter_i..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (200 samples, 0.68%)</title><rect x="49.3243%" y="229" width="0.6757%" height="15" fill="rgb(254,28,30)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="239.50">core::ops::try_trait::Nev..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (200 samples, 0.68%)</title><rect x="49.3243%" y="213" width="0.6757%" height="15" fill="rgb(241,142,54)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="223.50">core::iter::adapters::map..</text></g><g><title>&lt;chumsky::error::Rich&lt;&lt;I as chumsky::input::Input&gt;::Token,&lt;I as chumsky::input::Input&gt;::Span&gt; as chumsky::label::LabelError&lt;I,L&gt;&gt;::replace_expected_found::{{closure}} (200 samples, 0.68%)</title><rect x="49.3243%" y="197" width="0.6757%" height="15" fill="rgb(222,85,15)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="207.50">&lt;chumsky::error::Rich&lt;&lt;I ..</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (200 samples, 0.68%)</title><rect x="49.3243%" y="181" width="0.6757%" height="15" fill="rgb(210,85,47)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="191.50">&lt;T as core::convert::Into..</text></g><g><title>&lt;chumsky::error::RichPattern&lt;T&gt; as core::convert::From&lt;chumsky::DefaultExpected&lt;T&gt;&gt;&gt;::from (200 samples, 0.68%)</title><rect x="49.3243%" y="165" width="0.6757%" height="15" fill="rgb(224,206,25)" fg:x="14600" fg:w="200"/><text x="49.3347%" y="175.50">&lt;chumsky::error::RichPatt..</text></g><g><title>core::option::Option&lt;T&gt;::take (300 samples, 1.01%)</title><rect x="50.0000%" y="405" width="1.0135%" height="15" fill="rgb(243,201,19)" fg:x="14800" fg:w="300"/><text x="50.0104%" y="415.50">core::option::Option&lt;T&gt;::take</text></g><g><title>core::mem::replace (300 samples, 1.01%)</title><rect x="50.0000%" y="389" width="1.0135%" height="15" fill="rgb(236,59,4)" fg:x="14800" fg:w="300"/><text x="50.0104%" y="399.50">core::mem::replace</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;chumsky::private::Located&lt;(usize,core::option::Option&lt;usize&gt;),chumsky::error::Rich&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;&gt;&gt;&gt;&gt; (100 samples, 0.34%)</title><rect x="51.0135%" y="405" width="0.3378%" height="15" fill="rgb(254,179,45)" fg:x="15100" fg:w="100"/><text x="51.0239%" y="415.50">core::ptr::..</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::add_alt (2,200 samples, 7.43%)</title><rect x="44.5946%" y="421" width="7.4324%" height="15" fill="rgb(226,14,10)" fg:x="13200" fg:w="2200"/><text x="44.6050%" y="431.50">chumsky::input::InputRef&lt;I,E&gt;::add_alt</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;chumsky::private::Located&lt;usize,chumsky::error::Rich&lt;char&gt;&gt;&gt;&gt; (200 samples, 0.68%)</title><rect x="51.3514%" y="405" width="0.6757%" height="15" fill="rgb(244,27,41)" fg:x="15200" fg:w="200"/><text x="51.3618%" y="415.50">core::ptr::drop_in_place&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="56.7568%" y="389" width="0.3378%" height="15" fill="rgb(235,35,32)" fg:x="16800" fg:w="100"/><text x="56.7672%" y="399.50">&lt;alloc::box..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (100 samples, 0.34%)</title><rect x="56.7568%" y="373" width="0.3378%" height="15" fill="rgb(218,68,31)" fg:x="16800" fg:w="100"/><text x="56.7672%" y="383.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (100 samples, 0.34%)</title><rect x="56.7568%" y="357" width="0.3378%" height="15" fill="rgb(207,120,37)" fg:x="16800" fg:w="100"/><text x="56.7672%" y="367.50">alloc::allo..</text></g><g><title>__rustc::__rdl_dealloc (100 samples, 0.34%)</title><rect x="56.7568%" y="341" width="0.3378%" height="15" fill="rgb(227,98,0)" fg:x="16800" fg:w="100"/><text x="56.7672%" y="351.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (100 samples, 0.34%)</title><rect x="56.7568%" y="325" width="0.3378%" height="15" fill="rgb(207,7,3)" fg:x="16800" fg:w="100"/><text x="56.7672%" y="335.50">std::sys::a..</text></g><g><title>__GI___libc_free (100 samples, 0.34%)</title><rect x="56.7568%" y="309" width="0.3378%" height="15" fill="rgb(206,98,19)" fg:x="16800" fg:w="100"/><text x="56.7672%" y="319.50">__GI___libc..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (200 samples, 0.68%)</title><rect x="57.0946%" y="389" width="0.6757%" height="15" fill="rgb(217,5,26)" fg:x="16900" fg:w="200"/><text x="57.1050%" y="399.50">alloc::boxed::Box&lt;T&gt;::new</text></g><g><title>chumsky::error::RichReason&lt;T&gt;::flat_merge (300 samples, 1.01%)</title><rect x="57.7703%" y="389" width="1.0135%" height="15" fill="rgb(235,190,38)" fg:x="17100" fg:w="300"/><text x="57.7807%" y="399.50">chumsky::error::RichReason&lt;T&gt;::flat_mer..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chumsky::error::RichPattern&lt;char&gt;&gt;&gt; (100 samples, 0.34%)</title><rect x="58.4459%" y="373" width="0.3378%" height="15" fill="rgb(247,86,24)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="383.50">core::ptr::..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="58.4459%" y="357" width="0.3378%" height="15" fill="rgb(205,101,16)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="367.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chumsky::error::RichPattern&lt;char&gt;,alloc::alloc::Global&gt;&gt; (100 samples, 0.34%)</title><rect x="58.4459%" y="341" width="0.3378%" height="15" fill="rgb(246,168,33)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="351.50">core::ptr::..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="58.4459%" y="325" width="0.3378%" height="15" fill="rgb(231,114,1)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="335.50">&lt;&lt;alloc::ve..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chumsky::error::RichPattern&lt;char&gt;&gt;&gt; (100 samples, 0.34%)</title><rect x="58.4459%" y="309" width="0.3378%" height="15" fill="rgb(207,184,53)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="319.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="58.4459%" y="293" width="0.3378%" height="15" fill="rgb(224,95,51)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="303.50">&lt;alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (100 samples, 0.34%)</title><rect x="58.4459%" y="277" width="0.3378%" height="15" fill="rgb(212,188,45)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="287.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (100 samples, 0.34%)</title><rect x="58.4459%" y="261" width="0.3378%" height="15" fill="rgb(223,154,38)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="271.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (100 samples, 0.34%)</title><rect x="58.4459%" y="245" width="0.3378%" height="15" fill="rgb(251,22,52)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="255.50">alloc::allo..</text></g><g><title>__rustc::__rdl_dealloc (100 samples, 0.34%)</title><rect x="58.4459%" y="229" width="0.3378%" height="15" fill="rgb(229,209,22)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="239.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (100 samples, 0.34%)</title><rect x="58.4459%" y="213" width="0.3378%" height="15" fill="rgb(234,138,34)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="223.50">std::sys::a..</text></g><g><title>__GI___libc_free (100 samples, 0.34%)</title><rect x="58.4459%" y="197" width="0.3378%" height="15" fill="rgb(212,95,11)" fg:x="17300" fg:w="100"/><text x="58.4564%" y="207.50">__GI___libc..</text></g><g><title>&lt;chumsky::error::Rich&lt;&lt;I as chumsky::input::Input&gt;::Token,&lt;I as chumsky::input::Input&gt;::Span&gt; as chumsky::error::Error&lt;I&gt;&gt;::merge (700 samples, 2.36%)</title><rect x="56.7568%" y="405" width="2.3649%" height="15" fill="rgb(240,179,47)" fg:x="16800" fg:w="700"/><text x="56.7672%" y="415.50">&lt;chumsky::error::Rich&lt;&lt;I as chumsky::input::Input&gt;::Token,&lt;I as chumsky::input::Input&gt;::Span&gt; ..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(chumsky::error::RichPattern&lt;char&gt;,chumsky::span::SimpleSpan)&gt;&gt; (100 samples, 0.34%)</title><rect x="58.7838%" y="389" width="0.3378%" height="15" fill="rgb(240,163,11)" fg:x="17400" fg:w="100"/><text x="58.7942%" y="399.50">core::ptr::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="58.7838%" y="373" width="0.3378%" height="15" fill="rgb(236,37,12)" fg:x="17400" fg:w="100"/><text x="58.7942%" y="383.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;[(chumsky::error::RichPattern&lt;char&gt;,chumsky::span::SimpleSpan)]&gt; (100 samples, 0.34%)</title><rect x="58.7838%" y="357" width="0.3378%" height="15" fill="rgb(232,164,16)" fg:x="17400" fg:w="100"/><text x="58.7942%" y="367.50">core::ptr::..</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::add_alt_err (2,200 samples, 7.43%)</title><rect x="52.0270%" y="421" width="7.4324%" height="15" fill="rgb(244,205,15)" fg:x="15400" fg:w="2200"/><text x="52.0374%" y="431.50">chumsky::input::InputRef&lt;I,E&gt;::add_alt_err</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (100 samples, 0.34%)</title><rect x="59.1216%" y="405" width="0.3378%" height="15" fill="rgb(223,117,47)" fg:x="17500" fg:w="100"/><text x="59.1320%" y="415.50">core::cmp::..</text></g><g><title>&lt;alloc::vec::Vec&lt;Op&gt; as chumsky::pratt::Operator&lt;I,O,E&gt;&gt;::do_parse_infix (100 samples, 0.34%)</title><rect x="60.8108%" y="405" width="0.3378%" height="15" fill="rgb(244,107,35)" fg:x="18000" fg:w="100"/><text x="60.8212%" y="415.50">&lt;alloc::vec..</text></g><g><title>&lt;chumsky::pratt::Infix&lt;A,F,O,Op,I,E&gt; as chumsky::pratt::Operator&lt;I,O,E&gt;&gt;::do_parse_infix (100 samples, 0.34%)</title><rect x="60.8108%" y="389" width="0.3378%" height="15" fill="rgb(205,140,8)" fg:x="18000" fg:w="100"/><text x="60.8212%" y="399.50">&lt;chumsky::p..</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::rewind (100 samples, 0.34%)</title><rect x="60.8108%" y="373" width="0.3378%" height="15" fill="rgb(228,84,46)" fg:x="18000" fg:w="100"/><text x="60.8212%" y="383.50">chumsky::in..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (100 samples, 0.34%)</title><rect x="60.8108%" y="357" width="0.3378%" height="15" fill="rgb(254,188,9)" fg:x="18000" fg:w="100"/><text x="60.8212%" y="367.50">alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;Op&gt; as chumsky::pratt::Operator&lt;I,O,E&gt;&gt;::do_parse_postfix (300 samples, 1.01%)</title><rect x="61.1486%" y="405" width="1.0135%" height="15" fill="rgb(206,112,54)" fg:x="18100" fg:w="300"/><text x="61.1591%" y="415.50">&lt;alloc::vec::Vec&lt;Op&gt; as chumsky::pratt:..</text></g><g><title>&lt;alloc::vec::Vec&lt;Op&gt; as chumsky::pratt::Operator&lt;I,O,E&gt;&gt;::do_parse_prefix (100 samples, 0.34%)</title><rect x="62.1622%" y="405" width="0.3378%" height="15" fill="rgb(216,84,49)" fg:x="18400" fg:w="100"/><text x="62.1726%" y="415.50">&lt;alloc::vec..</text></g><g><title>&lt;chumsky::pratt::Boxed&lt;I,O,E&gt; as chumsky::pratt::Operator&lt;I,O,E&gt;&gt;::do_parse_prefix (100 samples, 0.34%)</title><rect x="62.1622%" y="389" width="0.3378%" height="15" fill="rgb(214,194,35)" fg:x="18400" fg:w="100"/><text x="62.1726%" y="399.50">&lt;chumsky::p..</text></g><g><title>&lt;chumsky::private::Emit as chumsky::private::Mode&gt;::invoke_pratt_op_prefix (100 samples, 0.34%)</title><rect x="62.1622%" y="373" width="0.3378%" height="15" fill="rgb(249,28,3)" fg:x="18400" fg:w="100"/><text x="62.1726%" y="383.50">&lt;chumsky::p..</text></g><g><title>&lt;chumsky::pratt::Boxed&lt;I,O,E&gt; as chumsky::pratt::Operator&lt;I,O,E&gt;&gt;::do_parse_prefix_emit (100 samples, 0.34%)</title><rect x="62.1622%" y="357" width="0.3378%" height="15" fill="rgb(222,56,52)" fg:x="18400" fg:w="100"/><text x="62.1726%" y="367.50">&lt;chumsky::p..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (100 samples, 0.34%)</title><rect x="62.1622%" y="341" width="0.3378%" height="15" fill="rgb(245,217,50)" fg:x="18400" fg:w="100"/><text x="62.1726%" y="351.50">&lt;alloc::rc:..</text></g><g><title>&lt;chumsky::combinator::MapWith&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (200 samples, 0.68%)</title><rect x="62.5000%" y="405" width="0.6757%" height="15" fill="rgb(213,201,24)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="415.50">&lt;chumsky::combinator::Map..</text></g><g><title>&lt;chumsky::private::Emit as chumsky::private::Mode&gt;::map (200 samples, 0.68%)</title><rect x="62.5000%" y="389" width="0.6757%" height="15" fill="rgb(248,116,28)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="399.50">&lt;chumsky::private::Emit a..</text></g><g><title>&lt;chumsky::combinator::MapWith&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go::{{closure}} (200 samples, 0.68%)</title><rect x="62.5000%" y="373" width="0.6757%" height="15" fill="rgb(219,72,43)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="383.50">&lt;chumsky::combinator::Map..</text></g><g><title>flare_internals::passes::parser::parser::{{closure}}::{{closure}} (200 samples, 0.68%)</title><rect x="62.5000%" y="357" width="0.6757%" height="15" fill="rgb(209,138,14)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="367.50">flare_internals::passes::..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (200 samples, 0.68%)</title><rect x="62.5000%" y="341" width="0.6757%" height="15" fill="rgb(222,18,33)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="351.50">&lt;T as alloc::string::ToSt..</text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (200 samples, 0.68%)</title><rect x="62.5000%" y="325" width="0.6757%" height="15" fill="rgb(213,199,7)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="335.50">&lt;str as alloc::string::Sp..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (200 samples, 0.68%)</title><rect x="62.5000%" y="309" width="0.6757%" height="15" fill="rgb(250,110,10)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="319.50">&lt;alloc::string::String as..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (200 samples, 0.68%)</title><rect x="62.5000%" y="293" width="0.6757%" height="15" fill="rgb(248,123,6)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="303.50">alloc::str::&lt;impl alloc::..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (200 samples, 0.68%)</title><rect x="62.5000%" y="277" width="0.6757%" height="15" fill="rgb(206,91,31)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="287.50">alloc::slice::&lt;impl alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (200 samples, 0.68%)</title><rect x="62.5000%" y="261" width="0.6757%" height="15" fill="rgb(211,154,13)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="271.50">alloc::slice::&lt;impl [T]&gt;:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (200 samples, 0.68%)</title><rect x="62.5000%" y="245" width="0.6757%" height="15" fill="rgb(225,148,7)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="255.50">alloc::slice::&lt;impl [T]&gt;:..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (200 samples, 0.68%)</title><rect x="62.5000%" y="229" width="0.6757%" height="15" fill="rgb(220,160,43)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="239.50">&lt;T as alloc::slice::&lt;impl..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (200 samples, 0.68%)</title><rect x="62.5000%" y="213" width="0.6757%" height="15" fill="rgb(213,52,39)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="223.50">alloc::vec::Vec&lt;T,A&gt;::wit..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (200 samples, 0.68%)</title><rect x="62.5000%" y="197" width="0.6757%" height="15" fill="rgb(243,137,7)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="207.50">alloc::raw_vec::RawVec&lt;T,..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (200 samples, 0.68%)</title><rect x="62.5000%" y="181" width="0.6757%" height="15" fill="rgb(230,79,13)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="191.50">alloc::raw_vec::RawVecInn..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (200 samples, 0.68%)</title><rect x="62.5000%" y="165" width="0.6757%" height="15" fill="rgb(247,105,23)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="175.50">alloc::raw_vec::RawVecInn..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (200 samples, 0.68%)</title><rect x="62.5000%" y="149" width="0.6757%" height="15" fill="rgb(223,179,41)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="159.50">&lt;alloc::alloc::Global as ..</text></g><g><title>alloc::alloc::Global::alloc_impl (200 samples, 0.68%)</title><rect x="62.5000%" y="133" width="0.6757%" height="15" fill="rgb(218,9,34)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="143.50">alloc::alloc::Global::all..</text></g><g><title>alloc::alloc::alloc (200 samples, 0.68%)</title><rect x="62.5000%" y="117" width="0.6757%" height="15" fill="rgb(222,106,8)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="127.50">alloc::alloc::alloc</text></g><g><title>__rustc::__rdl_alloc (200 samples, 0.68%)</title><rect x="62.5000%" y="101" width="0.6757%" height="15" fill="rgb(211,220,0)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="111.50">__rustc::__rdl_alloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (200 samples, 0.68%)</title><rect x="62.5000%" y="85" width="0.6757%" height="15" fill="rgb(229,52,16)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="95.50">std::sys::alloc::unix::&lt;i..</text></g><g><title>__GI___libc_malloc (200 samples, 0.68%)</title><rect x="62.5000%" y="69" width="0.6757%" height="15" fill="rgb(212,155,18)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="79.50">__GI___libc_malloc</text></g><g><title>_int_malloc (200 samples, 0.68%)</title><rect x="62.5000%" y="53" width="0.6757%" height="15" fill="rgb(242,21,14)" fg:x="18500" fg:w="200"/><text x="62.5104%" y="63.50">_int_malloc</text></g><g><title>&lt;chumsky::combinator::NestedIn&lt;A,B,J,F,O,E&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="63.5135%" y="389" width="0.3378%" height="15" fill="rgb(222,19,48)" fg:x="18800" fg:w="100"/><text x="63.5239%" y="399.50">&lt;chumsky::c..</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::with_input (100 samples, 0.34%)</title><rect x="63.5135%" y="373" width="0.3378%" height="15" fill="rgb(232,45,27)" fg:x="18800" fg:w="100"/><text x="63.5239%" y="383.50">chumsky::in..</text></g><g><title>chumsky::pratt::Pratt&lt;Atom,Ops&gt;::pratt_go (1,400 samples, 4.73%)</title><rect x="59.4595%" y="421" width="4.7297%" height="15" fill="rgb(249,103,42)" fg:x="17600" fg:w="1400"/><text x="59.4699%" y="431.50">chumsky::pratt::Pratt&lt;Atom,Ops&gt;::pratt_go</text></g><g><title>&lt;chumsky::primitive::Choice&lt;(X_,Y_,Z_)&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (300 samples, 1.01%)</title><rect x="63.1757%" y="405" width="1.0135%" height="15" fill="rgb(246,81,33)" fg:x="18700" fg:w="300"/><text x="63.1861%" y="415.50">&lt;chumsky::primitive::Choice&lt;(X_,Y_,Z_)&gt;..</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::save (100 samples, 0.34%)</title><rect x="63.8514%" y="389" width="0.3378%" height="15" fill="rgb(252,33,42)" fg:x="18900" fg:w="100"/><text x="63.8618%" y="399.50">chumsky::in..</text></g><g><title>chumsky::input::InputRef&lt;I,E&gt;::cursor (100 samples, 0.34%)</title><rect x="63.8514%" y="373" width="0.3378%" height="15" fill="rgb(209,212,41)" fg:x="18900" fg:w="100"/><text x="63.8618%" y="383.50">chumsky::in..</text></g><g><title>core::clone::Clone::clone (100 samples, 0.34%)</title><rect x="63.8514%" y="357" width="0.3378%" height="15" fill="rgb(207,154,6)" fg:x="18900" fg:w="100"/><text x="63.8618%" y="367.50">core::clone..</text></g><g><title>core::ptr::drop_in_place&lt;(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;)&gt; (200 samples, 0.68%)</title><rect x="64.1892%" y="421" width="0.6757%" height="15" fill="rgb(223,64,47)" fg:x="19000" fg:w="200"/><text x="64.1996%" y="431.50">core::ptr::drop_in_place&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;flare_internals::resource::rep::Expr&gt; (200 samples, 0.68%)</title><rect x="64.1892%" y="405" width="0.6757%" height="15" fill="rgb(211,161,38)" fg:x="19000" fg:w="200"/><text x="64.1996%" y="415.50">core::ptr::drop_in_place&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;)&gt;&gt; (200 samples, 0.68%)</title><rect x="64.1892%" y="389" width="0.6757%" height="15" fill="rgb(219,138,40)" fg:x="19000" fg:w="200"/><text x="64.1996%" y="399.50">core::ptr::drop_in_place&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;(flare_internals::resource::rep::Package,std::path::PathBuf,alloc::string::String)&gt; (100 samples, 0.34%)</title><rect x="64.8649%" y="421" width="0.3378%" height="15" fill="rgb(241,228,46)" fg:x="19200" fg:w="100"/><text x="64.8753%" y="431.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;flare_internals::resource::rep::Package&gt; (100 samples, 0.34%)</title><rect x="64.8649%" y="405" width="0.3378%" height="15" fill="rgb(223,209,38)" fg:x="19200" fg:w="100"/><text x="64.8753%" y="415.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;flare_internals::resource::rep::Definition&gt;&gt; (100 samples, 0.34%)</title><rect x="64.8649%" y="389" width="0.3378%" height="15" fill="rgb(236,164,45)" fg:x="19200" fg:w="100"/><text x="64.8753%" y="399.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;flare_internals::resource::rep::Definition&gt;&gt; (100 samples, 0.34%)</title><rect x="64.8649%" y="373" width="0.3378%" height="15" fill="rgb(231,15,5)" fg:x="19200" fg:w="100"/><text x="64.8753%" y="383.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="64.8649%" y="357" width="0.3378%" height="15" fill="rgb(252,35,15)" fg:x="19200" fg:w="100"/><text x="64.8753%" y="367.50">&lt;alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (100 samples, 0.34%)</title><rect x="64.8649%" y="341" width="0.3378%" height="15" fill="rgb(248,181,18)" fg:x="19200" fg:w="100"/><text x="64.8753%" y="351.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (100 samples, 0.34%)</title><rect x="64.8649%" y="325" width="0.3378%" height="15" fill="rgb(233,39,42)" fg:x="19200" fg:w="100"/><text x="64.8753%" y="335.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (100 samples, 0.34%)</title><rect x="64.8649%" y="309" width="0.3378%" height="15" fill="rgb(238,110,33)" fg:x="19200" fg:w="100"/><text x="64.8753%" y="319.50">alloc::allo..</text></g><g><title>__rustc::__rdl_dealloc (100 samples, 0.34%)</title><rect x="64.8649%" y="293" width="0.3378%" height="15" fill="rgb(233,195,10)" fg:x="19200" fg:w="100"/><text x="64.8753%" y="303.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (100 samples, 0.34%)</title><rect x="64.8649%" y="277" width="0.3378%" height="15" fill="rgb(254,105,3)" fg:x="19200" fg:w="100"/><text x="64.8753%" y="287.50">std::sys::a..</text></g><g><title>_int_free (100 samples, 0.34%)</title><rect x="64.8649%" y="261" width="0.3378%" height="15" fill="rgb(221,225,9)" fg:x="19200" fg:w="100"/><text x="64.8753%" y="271.50">_int_free</text></g><g><title>core::ptr::drop_in_place&lt;[chumsky::private::Located&lt;(usize,core::option::Option&lt;usize&gt;),chumsky::error::Rich&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;&gt;&gt;]&gt; (300 samples, 1.01%)</title><rect x="65.2027%" y="421" width="1.0135%" height="15" fill="rgb(224,227,45)" fg:x="19300" fg:w="300"/><text x="65.2131%" y="431.50">core::ptr::drop_in_place&lt;[chumsky::priv..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;((flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;),(flare_internals::resource::rep::Ty,chumsky::span::SimpleSpan&lt;usize,u64&gt;))&gt;&gt; (100 samples, 0.34%)</title><rect x="66.2162%" y="421" width="0.3378%" height="15" fill="rgb(229,198,43)" fg:x="19600" fg:w="100"/><text x="66.2266%" y="431.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chumsky::pratt::Boxed&lt;chumsky::input::MappedInput&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;,&amp;[(flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;)],flare_internals::passes::parser::make_input::{{closure}}&gt;,(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;),chumsky::extra::Full&lt;chumsky::error::Rich&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;&gt;,chumsky::inspector::SimpleState&lt;u64&gt;,()&gt;&gt;&gt;&gt; (300 samples, 1.01%)</title><rect x="66.5541%" y="421" width="1.0135%" height="15" fill="rgb(206,209,35)" fg:x="19700" fg:w="300"/><text x="66.5645%" y="431.50">core::ptr::drop_in_place&lt;alloc::vec::Ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (200 samples, 0.68%)</title><rect x="66.8919%" y="405" width="0.6757%" height="15" fill="rgb(245,195,53)" fg:x="19800" fg:w="200"/><text x="66.9023%" y="415.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>core::ptr::drop_in_place&lt;[chumsky::pratt::Boxed&lt;chumsky::input::MappedInput&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;,&amp;[(flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;)],flare_internals::passes::parser::make_input::{{closure}}&gt;,(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;),chumsky::extra::Full&lt;chumsky::error::Rich&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;&gt;,chumsky::inspector::SimpleState&lt;u64&gt;,()&gt;&gt;]&gt; (200 samples, 0.68%)</title><rect x="66.8919%" y="389" width="0.6757%" height="15" fill="rgb(240,92,26)" fg:x="19800" fg:w="200"/><text x="66.9023%" y="399.50">core::ptr::drop_in_place&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;chumsky::pratt::Boxed&lt;chumsky::input::MappedInput&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;,&amp;[(flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;)],flare_internals::passes::parser::make_input::{{closure}}&gt;,(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;),chumsky::extra::Full&lt;chumsky::error::Rich&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;&gt;,chumsky::inspector::SimpleState&lt;u64&gt;,()&gt;&gt;&gt; (200 samples, 0.68%)</title><rect x="66.8919%" y="373" width="0.6757%" height="15" fill="rgb(207,40,23)" fg:x="19800" fg:w="200"/><text x="66.9023%" y="383.50">core::ptr::drop_in_place&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;dyn chumsky::pratt::Operator&lt;chumsky::input::MappedInput&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;,&amp;[(flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;)],flare_internals::passes::parser::make_input::{{closure}}&gt;,(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;),chumsky::extra::Full&lt;chumsky::error::Rich&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;&gt;,chumsky::inspector::SimpleState&lt;u64&gt;,()&gt;&gt;&gt;&gt; (200 samples, 0.68%)</title><rect x="66.8919%" y="357" width="0.6757%" height="15" fill="rgb(223,111,35)" fg:x="19800" fg:w="200"/><text x="66.9023%" y="367.50">core::ptr::drop_in_place&lt;..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (200 samples, 0.68%)</title><rect x="66.8919%" y="341" width="0.6757%" height="15" fill="rgb(229,147,28)" fg:x="19800" fg:w="200"/><text x="66.9023%" y="351.50">&lt;alloc::rc::Rc&lt;T,A&gt; as co..</text></g><g><title>_int_free (100 samples, 0.34%)</title><rect x="67.2297%" y="325" width="0.3378%" height="15" fill="rgb(211,29,28)" fg:x="19900" fg:w="100"/><text x="67.2401%" y="335.50">_int_free</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (200 samples, 0.68%)</title><rect x="67.5676%" y="389" width="0.6757%" height="15" fill="rgb(228,72,33)" fg:x="20000" fg:w="200"/><text x="67.5780%" y="399.50">&lt;alloc::boxed::Box&lt;T,A&gt; a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (200 samples, 0.68%)</title><rect x="67.5676%" y="373" width="0.6757%" height="15" fill="rgb(205,214,31)" fg:x="20000" fg:w="200"/><text x="67.5780%" y="383.50">&lt;alloc::alloc::Global as ..</text></g><g><title>alloc::alloc::dealloc (200 samples, 0.68%)</title><rect x="67.5676%" y="357" width="0.6757%" height="15" fill="rgb(224,111,15)" fg:x="20000" fg:w="200"/><text x="67.5780%" y="367.50">alloc::alloc::dealloc</text></g><g><title>__rustc::__rdl_dealloc (200 samples, 0.68%)</title><rect x="67.5676%" y="341" width="0.6757%" height="15" fill="rgb(253,21,26)" fg:x="20000" fg:w="200"/><text x="67.5780%" y="351.50">__rustc::__rdl_dealloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (200 samples, 0.68%)</title><rect x="67.5676%" y="325" width="0.6757%" height="15" fill="rgb(245,139,43)" fg:x="20000" fg:w="200"/><text x="67.5780%" y="335.50">std::sys::alloc::unix::&lt;i..</text></g><g><title>_int_free (200 samples, 0.68%)</title><rect x="67.5676%" y="309" width="0.6757%" height="15" fill="rgb(252,170,7)" fg:x="20000" fg:w="200"/><text x="67.5780%" y="319.50">_int_free</text></g><g><title>__GI___libc_free (100 samples, 0.34%)</title><rect x="68.2432%" y="373" width="0.3378%" height="15" fill="rgb(231,118,14)" fg:x="20200" fg:w="100"/><text x="68.2537%" y="383.50">__GI___libc..</text></g><g><title>_int_free (100 samples, 0.34%)</title><rect x="68.5811%" y="373" width="0.3378%" height="15" fill="rgb(238,83,0)" fg:x="20300" fg:w="100"/><text x="68.5915%" y="383.50">_int_free</text></g><g><title>core::ptr::drop_in_place&lt;chumsky::error::Rich&lt;char&gt;&gt; (500 samples, 1.69%)</title><rect x="67.5676%" y="421" width="1.6892%" height="15" fill="rgb(221,39,39)" fg:x="20000" fg:w="500"/><text x="67.5780%" y="431.50">core::ptr::drop_in_place&lt;chumsky::error::Rich&lt;char&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;chumsky::error::RichReason&lt;char&gt;&gt;&gt; (500 samples, 1.69%)</title><rect x="67.5676%" y="405" width="1.6892%" height="15" fill="rgb(222,119,46)" fg:x="20000" fg:w="500"/><text x="67.5780%" y="415.50">core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;chumsky::error::RichRea..</text></g><g><title>core::ptr::drop_in_place&lt;chumsky::error::RichReason&lt;char&gt;&gt; (300 samples, 1.01%)</title><rect x="68.2432%" y="389" width="1.0135%" height="15" fill="rgb(222,165,49)" fg:x="20200" fg:w="300"/><text x="68.2537%" y="399.50">core::ptr::drop_in_place&lt;chumsky::error..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chumsky::error::RichPattern&lt;char&gt;&gt;&gt; (100 samples, 0.34%)</title><rect x="68.9189%" y="373" width="0.3378%" height="15" fill="rgb(219,113,52)" fg:x="20400" fg:w="100"/><text x="68.9293%" y="383.50">core::ptr::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="68.9189%" y="357" width="0.3378%" height="15" fill="rgb(214,7,15)" fg:x="20400" fg:w="100"/><text x="68.9293%" y="367.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;[chumsky::error::RichPattern&lt;char&gt;]&gt; (100 samples, 0.34%)</title><rect x="68.9189%" y="341" width="0.3378%" height="15" fill="rgb(235,32,4)" fg:x="20400" fg:w="100"/><text x="68.9293%" y="351.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;chumsky::error::RichReason&lt;flare_internals::passes::parser::Token&gt;&gt; (400 samples, 1.35%)</title><rect x="69.2568%" y="421" width="1.3514%" height="15" fill="rgb(238,90,54)" fg:x="20500" fg:w="400"/><text x="69.2672%" y="431.50">core::ptr::drop_in_place&lt;chumsky::error::RichReason&lt;..</text></g><g><title>_int_free (200 samples, 0.68%)</title><rect x="69.9324%" y="405" width="0.6757%" height="15" fill="rgb(213,208,19)" fg:x="20700" fg:w="200"/><text x="69.9428%" y="415.50">_int_free</text></g><g><title>core::ptr::drop_in_place&lt;chumsky::label::Labelled&lt;chumsky::combinator::Memoized&lt;chumsky::Boxed&lt;chumsky::input::MappedInput&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;,&amp;[(flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;)],flare_internals::passes::parser::make_input::{{closure}}&gt;,(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;),chumsky::extra::Full&lt;chumsky::error::Rich&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;&gt;,chumsky::inspector::SimpleState&lt;u64&gt;,()&gt;&gt;&gt;,&amp;str&gt;&gt; (100 samples, 0.34%)</title><rect x="70.6081%" y="421" width="0.3378%" height="15" fill="rgb(233,156,4)" fg:x="20900" fg:w="100"/><text x="70.6185%" y="431.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;chumsky::combinator::Memoized&lt;chumsky::Boxed&lt;chumsky::input::MappedInput&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;,&amp;[(flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;)],flare_internals::passes::parser::make_input::{{closure}}&gt;,(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;),chumsky::extra::Full&lt;chumsky::error::Rich&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;&gt;,chumsky::inspector::SimpleState&lt;u64&gt;,()&gt;&gt;&gt;&gt; (100 samples, 0.34%)</title><rect x="70.6081%" y="405" width="0.3378%" height="15" fill="rgb(207,194,5)" fg:x="20900" fg:w="100"/><text x="70.6185%" y="415.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;chumsky::Boxed&lt;chumsky::input::MappedInput&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;,&amp;[(flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;)],flare_internals::passes::parser::make_input::{{closure}}&gt;,(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;),chumsky::extra::Full&lt;chumsky::error::Rich&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;&gt;,chumsky::inspector::SimpleState&lt;u64&gt;,()&gt;&gt;&gt; (100 samples, 0.34%)</title><rect x="70.6081%" y="389" width="0.3378%" height="15" fill="rgb(206,111,30)" fg:x="20900" fg:w="100"/><text x="70.6185%" y="399.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;dyn chumsky::Parser&lt;chumsky::input::MappedInput&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;,&amp;[(flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;)],flare_internals::passes::parser::make_input::{{closure}}&gt;,(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;),chumsky::extra::Full&lt;chumsky::error::Rich&lt;flare_internals::passes::parser::Token,chumsky::span::SimpleSpan&lt;usize,u64&gt;&gt;,chumsky::inspector::SimpleState&lt;u64&gt;,()&gt;&gt;&gt;&gt; (100 samples, 0.34%)</title><rect x="70.6081%" y="373" width="0.3378%" height="15" fill="rgb(243,70,54)" fg:x="20900" fg:w="100"/><text x="70.6185%" y="383.50">core::ptr::..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="70.6081%" y="357" width="0.3378%" height="15" fill="rgb(242,28,8)" fg:x="20900" fg:w="100"/><text x="70.6185%" y="367.50">&lt;alloc::rc:..</text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (100 samples, 0.34%)</title><rect x="70.6081%" y="341" width="0.3378%" height="15" fill="rgb(219,106,18)" fg:x="20900" fg:w="100"/><text x="70.6185%" y="351.50">alloc::rc::..</text></g><g><title>core::cell::Cell&lt;T&gt;::set (100 samples, 0.34%)</title><rect x="70.6081%" y="325" width="0.3378%" height="15" fill="rgb(244,222,10)" fg:x="20900" fg:w="100"/><text x="70.6185%" y="335.50">core::cell:..</text></g><g><title>core::cell::Cell&lt;T&gt;::replace (100 samples, 0.34%)</title><rect x="70.6081%" y="309" width="0.3378%" height="15" fill="rgb(236,179,52)" fg:x="20900" fg:w="100"/><text x="70.6185%" y="319.50">core::cell:..</text></g><g><title>core::mem::replace (100 samples, 0.34%)</title><rect x="70.6081%" y="293" width="0.3378%" height="15" fill="rgb(213,23,39)" fg:x="20900" fg:w="100"/><text x="70.6185%" y="303.50">core::mem::..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::enumerate::Enumerate&lt;core::iter::adapters::zip::Zip&lt;alloc::vec::into_iter::IntoIter&lt;crossbeam_deque::deque::Worker&lt;rayon_core::job::JobRef&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;crossbeam_deque::deque::Stealer&lt;rayon_core::job::JobRef&gt;&gt;&gt;&gt;&gt; (100 samples, 0.34%)</title><rect x="70.9459%" y="421" width="0.3378%" height="15" fill="rgb(238,48,10)" fg:x="21000" fg:w="100"/><text x="70.9564%" y="431.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;flare_internals::passes::midend::environment::Environment&gt; (100 samples, 0.34%)</title><rect x="71.2838%" y="421" width="0.3378%" height="15" fill="rgb(251,196,23)" fg:x="21100" fg:w="100"/><text x="71.2942%" y="431.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;trie_rs::map::Trie&lt;flare_internals::passes::midend::environment::SimpleQuant,generational_arena::Index&gt;&gt; (100 samples, 0.34%)</title><rect x="71.2838%" y="405" width="0.3378%" height="15" fill="rgb(250,152,24)" fg:x="21100" fg:w="100"/><text x="71.2942%" y="415.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;trie_rs::map::TrieLabel&lt;flare_internals::passes::midend::environment::SimpleQuant,generational_arena::Index&gt;&gt;&gt; (100 samples, 0.34%)</title><rect x="71.2838%" y="389" width="0.3378%" height="15" fill="rgb(209,150,17)" fg:x="21100" fg:w="100"/><text x="71.2942%" y="399.50">core::ptr::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="71.2838%" y="373" width="0.3378%" height="15" fill="rgb(234,202,34)" fg:x="21100" fg:w="100"/><text x="71.2942%" y="383.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;[trie_rs::map::TrieLabel&lt;flare_internals::passes::midend::environment::SimpleQuant,generational_arena::Index&gt;]&gt; (100 samples, 0.34%)</title><rect x="71.2838%" y="357" width="0.3378%" height="15" fill="rgb(253,148,53)" fg:x="21100" fg:w="100"/><text x="71.2942%" y="367.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;trie_rs::map::TrieLabel&lt;flare_internals::passes::midend::environment::SimpleQuant,generational_arena::Index&gt;&gt; (100 samples, 0.34%)</title><rect x="71.2838%" y="341" width="0.3378%" height="15" fill="rgb(218,129,16)" fg:x="21100" fg:w="100"/><text x="71.2942%" y="351.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;flare_internals::passes::midend::environment::SimpleQuant&gt; (100 samples, 0.34%)</title><rect x="71.2838%" y="325" width="0.3378%" height="15" fill="rgb(216,85,19)" fg:x="21100" fg:w="100"/><text x="71.2942%" y="335.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;flare_internals::passes::midend::environment::Quantifier&gt; (100 samples, 0.34%)</title><rect x="71.6216%" y="421" width="0.3378%" height="15" fill="rgb(235,228,7)" fg:x="21200" fg:w="100"/><text x="71.6320%" y="431.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (100 samples, 0.34%)</title><rect x="71.6216%" y="405" width="0.3378%" height="15" fill="rgb(245,175,0)" fg:x="21200" fg:w="100"/><text x="71.6320%" y="415.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (100 samples, 0.34%)</title><rect x="71.6216%" y="389" width="0.3378%" height="15" fill="rgb(208,168,36)" fg:x="21200" fg:w="100"/><text x="71.6320%" y="399.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (100 samples, 0.34%)</title><rect x="71.6216%" y="373" width="0.3378%" height="15" fill="rgb(246,171,24)" fg:x="21200" fg:w="100"/><text x="71.6320%" y="383.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="71.6216%" y="357" width="0.3378%" height="15" fill="rgb(215,142,24)" fg:x="21200" fg:w="100"/><text x="71.6320%" y="367.50">&lt;alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (100 samples, 0.34%)</title><rect x="71.6216%" y="341" width="0.3378%" height="15" fill="rgb(250,187,7)" fg:x="21200" fg:w="100"/><text x="71.6320%" y="351.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (100 samples, 0.34%)</title><rect x="71.6216%" y="325" width="0.3378%" height="15" fill="rgb(228,66,33)" fg:x="21200" fg:w="100"/><text x="71.6320%" y="335.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (100 samples, 0.34%)</title><rect x="71.6216%" y="309" width="0.3378%" height="15" fill="rgb(234,215,21)" fg:x="21200" fg:w="100"/><text x="71.6320%" y="319.50">alloc::allo..</text></g><g><title>__rustc::__rdl_dealloc (100 samples, 0.34%)</title><rect x="71.6216%" y="293" width="0.3378%" height="15" fill="rgb(222,191,20)" fg:x="21200" fg:w="100"/><text x="71.6320%" y="303.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (100 samples, 0.34%)</title><rect x="71.6216%" y="277" width="0.3378%" height="15" fill="rgb(245,79,54)" fg:x="21200" fg:w="100"/><text x="71.6320%" y="287.50">std::sys::a..</text></g><g><title>_int_free (100 samples, 0.34%)</title><rect x="71.6216%" y="261" width="0.3378%" height="15" fill="rgb(240,10,37)" fg:x="21200" fg:w="100"/><text x="71.6320%" y="271.50">_int_free</text></g><g><title>__GI___libc_free (100 samples, 0.34%)</title><rect x="71.9595%" y="405" width="0.3378%" height="15" fill="rgb(214,192,32)" fg:x="21300" fg:w="100"/><text x="71.9699%" y="415.50">__GI___libc..</text></g><g><title>core::ptr::drop_in_place&lt;flare_internals::resource::rep::Definition&gt; (300 samples, 1.01%)</title><rect x="71.9595%" y="421" width="1.0135%" height="15" fill="rgb(209,36,54)" fg:x="21300" fg:w="300"/><text x="71.9699%" y="431.50">core::ptr::drop_in_place&lt;flare_internal..</text></g><g><title>_int_free (200 samples, 0.68%)</title><rect x="72.2973%" y="405" width="0.6757%" height="15" fill="rgb(220,10,11)" fg:x="21400" fg:w="200"/><text x="72.3077%" y="415.50">_int_free</text></g><g><title>core::ptr::drop_in_place&lt;flare_internals::resource::rep::Expr&gt; (400 samples, 1.35%)</title><rect x="72.9730%" y="421" width="1.3514%" height="15" fill="rgb(221,106,17)" fg:x="21600" fg:w="400"/><text x="72.9834%" y="431.50">core::ptr::drop_in_place&lt;flare_internals::resource::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(flare_internals::resource::rep::Expr,chumsky::span::SimpleSpan&lt;usize,u64&gt;)&gt;&gt; (100 samples, 0.34%)</title><rect x="73.9865%" y="405" width="0.3378%" height="15" fill="rgb(251,142,44)" fg:x="21900" fg:w="100"/><text x="73.9969%" y="415.50">core::ptr::..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="73.9865%" y="389" width="0.3378%" height="15" fill="rgb(238,13,15)" fg:x="21900" fg:w="100"/><text x="73.9969%" y="399.50">&lt;alloc::box..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (100 samples, 0.34%)</title><rect x="73.9865%" y="373" width="0.3378%" height="15" fill="rgb(208,107,27)" fg:x="21900" fg:w="100"/><text x="73.9969%" y="383.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (100 samples, 0.34%)</title><rect x="73.9865%" y="357" width="0.3378%" height="15" fill="rgb(205,136,37)" fg:x="21900" fg:w="100"/><text x="73.9969%" y="367.50">alloc::allo..</text></g><g><title>__rustc::__rdl_dealloc (100 samples, 0.34%)</title><rect x="73.9865%" y="341" width="0.3378%" height="15" fill="rgb(250,205,27)" fg:x="21900" fg:w="100"/><text x="73.9969%" y="351.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (100 samples, 0.34%)</title><rect x="73.9865%" y="325" width="0.3378%" height="15" fill="rgb(210,80,43)" fg:x="21900" fg:w="100"/><text x="73.9969%" y="335.50">std::sys::a..</text></g><g><title>_int_free (100 samples, 0.34%)</title><rect x="73.9865%" y="309" width="0.3378%" height="15" fill="rgb(247,160,36)" fg:x="21900" fg:w="100"/><text x="73.9969%" y="319.50">_int_free</text></g><g><title>core::str::converts::from_utf8 (700 samples, 2.36%)</title><rect x="74.3243%" y="421" width="2.3649%" height="15" fill="rgb(234,13,49)" fg:x="22000" fg:w="700"/><text x="74.3347%" y="431.50">core::str::converts::from_utf8</text></g><g><title>crossbeam_epoch::default::with_handle (100 samples, 0.34%)</title><rect x="76.6892%" y="421" width="0.3378%" height="15" fill="rgb(234,122,0)" fg:x="22700" fg:w="100"/><text x="76.6996%" y="431.50">crossbeam_e..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (100 samples, 0.34%)</title><rect x="76.6892%" y="405" width="0.3378%" height="15" fill="rgb(207,146,38)" fg:x="22700" fg:w="100"/><text x="76.6996%" y="415.50">std::thread..</text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (100 samples, 0.34%)</title><rect x="76.6892%" y="389" width="0.3378%" height="15" fill="rgb(207,177,25)" fg:x="22700" fg:w="100"/><text x="76.6996%" y="399.50">crossbeam_e..</text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (100 samples, 0.34%)</title><rect x="76.6892%" y="373" width="0.3378%" height="15" fill="rgb(211,178,42)" fg:x="22700" fg:w="100"/><text x="76.6996%" y="383.50">crossbeam_e..</text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (100 samples, 0.34%)</title><rect x="76.6892%" y="357" width="0.3378%" height="15" fill="rgb(230,69,54)" fg:x="22700" fg:w="100"/><text x="76.6996%" y="367.50">crossbeam_e..</text></g><g><title>crossbeam_epoch::internal::Local::pin (100 samples, 0.34%)</title><rect x="76.6892%" y="341" width="0.3378%" height="15" fill="rgb(214,135,41)" fg:x="22700" fg:w="100"/><text x="76.6996%" y="351.50">crossbeam_e..</text></g><g><title>core::cell::Cell&lt;T&gt;::get (100 samples, 0.34%)</title><rect x="76.6892%" y="325" width="0.3378%" height="15" fill="rgb(237,67,25)" fg:x="22700" fg:w="100"/><text x="76.6996%" y="335.50">core::cell:..</text></g><g><title>fid_rs::fid::fid_impl::&lt;impl fid_rs::fid::Fid&gt;::rbv (100 samples, 0.34%)</title><rect x="77.3649%" y="405" width="0.3378%" height="15" fill="rgb(222,189,50)" fg:x="22900" fg:w="100"/><text x="77.3753%" y="415.50">fid_rs::fid..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (100 samples, 0.34%)</title><rect x="77.3649%" y="389" width="0.3378%" height="15" fill="rgb(245,148,34)" fg:x="22900" fg:w="100"/><text x="77.3753%" y="399.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (100 samples, 0.34%)</title><rect x="77.3649%" y="373" width="0.3378%" height="15" fill="rgb(222,29,6)" fg:x="22900" fg:w="100"/><text x="77.3753%" y="383.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (100 samples, 0.34%)</title><rect x="77.3649%" y="357" width="0.3378%" height="15" fill="rgb(221,189,43)" fg:x="22900" fg:w="100"/><text x="77.3753%" y="367.50">alloc::vec:..</text></g><g><title>fid_rs::fid::fid_impl::&lt;impl core::ops::index::Index&lt;u64&gt; for fid_rs::fid::Fid&gt;::index (300 samples, 1.01%)</title><rect x="77.0270%" y="421" width="1.0135%" height="15" fill="rgb(207,36,27)" fg:x="22800" fg:w="300"/><text x="77.0374%" y="431.50">fid_rs::fid::fid_impl::&lt;impl core::ops:..</text></g><g><title>fid_rs::internal_data_structure::raw_bit_vector::RawBitVector::access (100 samples, 0.34%)</title><rect x="77.7027%" y="405" width="0.3378%" height="15" fill="rgb(217,90,24)" fg:x="23000" fg:w="100"/><text x="77.7131%" y="415.50">fid_rs::int..</text></g><g><title>fid_rs::fid::chunk::&lt;impl fid_rs::fid::Chunk&gt;::value (100 samples, 0.34%)</title><rect x="78.3784%" y="405" width="0.3378%" height="15" fill="rgb(224,66,35)" fg:x="23200" fg:w="100"/><text x="78.3888%" y="415.50">fid_rs::fid..</text></g><g><title>fid_rs::fid::fid_impl::&lt;impl fid_rs::fid::Fid&gt;::rank (300 samples, 1.01%)</title><rect x="78.0405%" y="421" width="1.0135%" height="15" fill="rgb(221,13,50)" fg:x="23100" fg:w="300"/><text x="78.0510%" y="431.50">fid_rs::fid::fid_impl::&lt;impl fid_rs::fi..</text></g><g><title>fid_rs::internal_data_structure::raw_bit_vector::RawBitVector::as_u32 (100 samples, 0.34%)</title><rect x="78.7162%" y="405" width="0.3378%" height="15" fill="rgb(236,68,49)" fg:x="23300" fg:w="100"/><text x="78.7266%" y="415.50">fid_rs::int..</text></g><g><title>fid_rs::fid::fid_impl::&lt;impl fid_rs::fid::Fid&gt;::select0 (200 samples, 0.68%)</title><rect x="79.0541%" y="421" width="0.6757%" height="15" fill="rgb(229,146,28)" fg:x="23400" fg:w="200"/><text x="79.0645%" y="431.50">fid_rs::fid::fid_impl::&lt;i..</text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (100 samples, 0.34%)</title><rect x="79.7297%" y="405" width="0.3378%" height="15" fill="rgb(225,31,38)" fg:x="23600" fg:w="100"/><text x="79.7401%" y="415.50">&lt;std::path:..</text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (100 samples, 0.34%)</title><rect x="79.7297%" y="389" width="0.3378%" height="15" fill="rgb(250,208,3)" fg:x="23600" fg:w="100"/><text x="79.7401%" y="399.50">&lt;std::path:..</text></g><g><title>core::ops::function::Fn::call (100 samples, 0.34%)</title><rect x="80.0676%" y="309" width="0.3378%" height="15" fill="rgb(246,54,23)" fg:x="23700" fg:w="100"/><text x="80.0780%" y="319.50">core::ops::..</text></g><g><title>std::sys::fs::unix::canonicalize (100 samples, 0.34%)</title><rect x="80.0676%" y="293" width="0.3378%" height="15" fill="rgb(243,76,11)" fg:x="23700" fg:w="100"/><text x="80.0780%" y="303.50">std::sys::f..</text></g><g><title>__realpath (100 samples, 0.34%)</title><rect x="80.0676%" y="277" width="0.3378%" height="15" fill="rgb(245,21,50)" fg:x="23700" fg:w="100"/><text x="80.0780%" y="287.50">__realpath</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="80.0676%" y="261" width="0.3378%" height="15" fill="rgb(228,9,43)" fg:x="23700" fg:w="100"/><text x="80.0780%" y="271.50">__GI___libc..</text></g><g><title>_int_malloc (100 samples, 0.34%)</title><rect x="80.0676%" y="245" width="0.3378%" height="15" fill="rgb(208,100,47)" fg:x="23700" fg:w="100"/><text x="80.0780%" y="255.50">_int_malloc</text></g><g><title>flare_internals::convert_path_to_id (300 samples, 1.01%)</title><rect x="79.7297%" y="421" width="1.0135%" height="15" fill="rgb(232,26,8)" fg:x="23600" fg:w="300"/><text x="79.7401%" y="431.50">flare_internals::convert_path_to_id</text></g><g><title>std::path::Path::canonicalize (200 samples, 0.68%)</title><rect x="80.0676%" y="405" width="0.6757%" height="15" fill="rgb(216,166,38)" fg:x="23700" fg:w="200"/><text x="80.0780%" y="415.50">std::path::Path::canonica..</text></g><g><title>std::fs::canonicalize (200 samples, 0.68%)</title><rect x="80.0676%" y="389" width="0.6757%" height="15" fill="rgb(251,202,51)" fg:x="23700" fg:w="200"/><text x="80.0780%" y="399.50">std::fs::canonicalize</text></g><g><title>std::sys::fs::canonicalize (200 samples, 0.68%)</title><rect x="80.0676%" y="373" width="0.6757%" height="15" fill="rgb(254,216,34)" fg:x="23700" fg:w="200"/><text x="80.0780%" y="383.50">std::sys::fs::canonicalize</text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (200 samples, 0.68%)</title><rect x="80.0676%" y="357" width="0.6757%" height="15" fill="rgb(251,32,27)" fg:x="23700" fg:w="200"/><text x="80.0780%" y="367.50">std::sys::pal::common::sm..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (200 samples, 0.68%)</title><rect x="80.0676%" y="341" width="0.6757%" height="15" fill="rgb(208,127,28)" fg:x="23700" fg:w="200"/><text x="80.0780%" y="351.50">std::sys::pal::common::sm..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (200 samples, 0.68%)</title><rect x="80.0676%" y="325" width="0.6757%" height="15" fill="rgb(224,137,22)" fg:x="23700" fg:w="200"/><text x="80.0780%" y="335.50">std::sys::pal::common::sm..</text></g><g><title>core::ptr::copy_nonoverlapping (100 samples, 0.34%)</title><rect x="80.4054%" y="309" width="0.3378%" height="15" fill="rgb(254,70,32)" fg:x="23800" fg:w="100"/><text x="80.4158%" y="319.50">core::ptr::..</text></g><g><title>__memmove_avx_unaligned_erms (100 samples, 0.34%)</title><rect x="80.4054%" y="293" width="0.3378%" height="15" fill="rgb(229,75,37)" fg:x="23800" fg:w="100"/><text x="80.4158%" y="303.50">__memmove_a..</text></g><g><title>flare_internals::parse_file (100 samples, 0.34%)</title><rect x="80.7432%" y="421" width="0.3378%" height="15" fill="rgb(252,64,23)" fg:x="23900" fg:w="100"/><text x="80.7537%" y="431.50">flare_inter..</text></g><g><title>alloc::string::String::new (100 samples, 0.34%)</title><rect x="80.7432%" y="405" width="0.3378%" height="15" fill="rgb(232,162,48)" fg:x="23900" fg:w="100"/><text x="80.7537%" y="415.50">alloc::stri..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(flare_internals::resource::rep::Package,std::path::PathBuf,alloc::string::String)&gt;&gt; (100 samples, 0.34%)</title><rect x="81.0811%" y="405" width="0.3378%" height="15" fill="rgb(246,160,12)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="415.50">core::ptr::..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="81.0811%" y="389" width="0.3378%" height="15" fill="rgb(247,166,0)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="399.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(flare_internals::resource::rep::Package,std::path::PathBuf,alloc::string::String),alloc::alloc::Global&gt;&gt; (100 samples, 0.34%)</title><rect x="81.0811%" y="373" width="0.3378%" height="15" fill="rgb(249,219,21)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="383.50">core::ptr::..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="81.0811%" y="357" width="0.3378%" height="15" fill="rgb(205,209,3)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="367.50">&lt;&lt;alloc::ve..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(flare_internals::resource::rep::Package,std::path::PathBuf,alloc::string::String)&gt;&gt; (100 samples, 0.34%)</title><rect x="81.0811%" y="341" width="0.3378%" height="15" fill="rgb(243,44,1)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="351.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="81.0811%" y="325" width="0.3378%" height="15" fill="rgb(206,159,16)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="335.50">&lt;alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (100 samples, 0.34%)</title><rect x="81.0811%" y="309" width="0.3378%" height="15" fill="rgb(244,77,30)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="319.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (100 samples, 0.34%)</title><rect x="81.0811%" y="293" width="0.3378%" height="15" fill="rgb(218,69,12)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="303.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (100 samples, 0.34%)</title><rect x="81.0811%" y="277" width="0.3378%" height="15" fill="rgb(212,87,7)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="287.50">alloc::allo..</text></g><g><title>__rustc::__rdl_dealloc (100 samples, 0.34%)</title><rect x="81.0811%" y="261" width="0.3378%" height="15" fill="rgb(245,114,25)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="271.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (100 samples, 0.34%)</title><rect x="81.0811%" y="245" width="0.3378%" height="15" fill="rgb(210,61,42)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="255.50">std::sys::a..</text></g><g><title>__GI___libc_free (100 samples, 0.34%)</title><rect x="81.0811%" y="229" width="0.3378%" height="15" fill="rgb(211,52,33)" fg:x="24000" fg:w="100"/><text x="81.0915%" y="239.50">__GI___libc..</text></g><g><title>flare_internals::passes::midend::environment::Environment::build (200 samples, 0.68%)</title><rect x="81.0811%" y="421" width="0.6757%" height="15" fill="rgb(234,58,33)" fg:x="24000" fg:w="200"/><text x="81.0915%" y="431.50">flare_internals::passes::..</text></g><g><title>trie_rs::map::trie_builder::&lt;impl trie_rs::map::TrieBuilder&lt;Label,Value&gt;&gt;::build (100 samples, 0.34%)</title><rect x="81.4189%" y="405" width="0.3378%" height="15" fill="rgb(220,115,36)" fg:x="24100" fg:w="100"/><text x="81.4293%" y="415.50">trie_rs::ma..</text></g><g><title>flare_internals::passes::midend::environment::Quantifier::into_simple (100 samples, 0.34%)</title><rect x="81.7568%" y="421" width="0.3378%" height="15" fill="rgb(243,153,54)" fg:x="24200" fg:w="100"/><text x="81.7672%" y="431.50">flare_inter..</text></g><g><title>flare_internals::passes::midend::environment::Quantifier::into_simple::collapse (100 samples, 0.34%)</title><rect x="81.7568%" y="405" width="0.3378%" height="15" fill="rgb(251,47,18)" fg:x="24200" fg:w="100"/><text x="81.7672%" y="415.50">flare_inter..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (100 samples, 0.34%)</title><rect x="82.4324%" y="405" width="0.3378%" height="15" fill="rgb(242,102,42)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="415.50">&lt;T as alloc..</text></g><g><title>&lt;alloc::string::String as alloc::string::SpecToString&gt;::spec_to_string (100 samples, 0.34%)</title><rect x="82.4324%" y="389" width="0.3378%" height="15" fill="rgb(234,31,38)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="399.50">&lt;alloc::str..</text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (100 samples, 0.34%)</title><rect x="82.4324%" y="373" width="0.3378%" height="15" fill="rgb(221,117,51)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="383.50">&lt;T as alloc..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (100 samples, 0.34%)</title><rect x="82.4324%" y="357" width="0.3378%" height="15" fill="rgb(212,20,18)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="367.50">&lt;alloc::str..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (100 samples, 0.34%)</title><rect x="82.4324%" y="341" width="0.3378%" height="15" fill="rgb(245,133,36)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="351.50">&lt;alloc::vec..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (100 samples, 0.34%)</title><rect x="82.4324%" y="325" width="0.3378%" height="15" fill="rgb(212,6,19)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="335.50">alloc::slic..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (100 samples, 0.34%)</title><rect x="82.4324%" y="309" width="0.3378%" height="15" fill="rgb(218,1,36)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="319.50">&lt;T as alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="82.4324%" y="293" width="0.3378%" height="15" fill="rgb(246,84,54)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="303.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="82.4324%" y="277" width="0.3378%" height="15" fill="rgb(242,110,6)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="287.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (100 samples, 0.34%)</title><rect x="82.4324%" y="261" width="0.3378%" height="15" fill="rgb(214,47,5)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="271.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (100 samples, 0.34%)</title><rect x="82.4324%" y="245" width="0.3378%" height="15" fill="rgb(218,159,25)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="255.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.34%)</title><rect x="82.4324%" y="229" width="0.3378%" height="15" fill="rgb(215,211,28)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="239.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.34%)</title><rect x="82.4324%" y="213" width="0.3378%" height="15" fill="rgb(238,59,32)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="223.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (100 samples, 0.34%)</title><rect x="82.4324%" y="197" width="0.3378%" height="15" fill="rgb(226,82,3)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="207.50">alloc::allo..</text></g><g><title>__rustc::__rdl_alloc (100 samples, 0.34%)</title><rect x="82.4324%" y="181" width="0.3378%" height="15" fill="rgb(240,164,32)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="191.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.34%)</title><rect x="82.4324%" y="165" width="0.3378%" height="15" fill="rgb(232,46,7)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="175.50">std::sys::a..</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="82.4324%" y="149" width="0.3378%" height="15" fill="rgb(229,129,53)" fg:x="24400" fg:w="100"/><text x="82.4428%" y="159.50">__GI___libc..</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::find (100 samples, 0.34%)</title><rect x="82.7703%" y="405" width="0.3378%" height="15" fill="rgb(234,188,29)" fg:x="24500" fg:w="100"/><text x="82.7807%" y="415.50">&lt;core::iter..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfind (100 samples, 0.34%)</title><rect x="82.7703%" y="389" width="0.3378%" height="15" fill="rgb(246,141,4)" fg:x="24500" fg:w="100"/><text x="82.7807%" y="399.50">core::iter:..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (100 samples, 0.34%)</title><rect x="82.7703%" y="373" width="0.3378%" height="15" fill="rgb(229,23,39)" fg:x="24500" fg:w="100"/><text x="82.7807%" y="383.50">core::iter:..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfind::check::{{closure}} (100 samples, 0.34%)</title><rect x="82.7703%" y="357" width="0.3378%" height="15" fill="rgb(206,12,3)" fg:x="24500" fg:w="100"/><text x="82.7807%" y="367.50">core::iter:..</text></g><g><title>flare_internals::passes::midend::typechecking::Solver::check_expr::{{closure}} (100 samples, 0.34%)</title><rect x="82.7703%" y="341" width="0.3378%" height="15" fill="rgb(252,226,20)" fg:x="24500" fg:w="100"/><text x="82.7807%" y="351.50">flare_inter..</text></g><g><title>alloc::string::&lt;impl core::cmp::PartialEq&lt;alloc::string::String&gt; for str&gt;::eq (100 samples, 0.34%)</title><rect x="82.7703%" y="325" width="0.3378%" height="15" fill="rgb(216,123,35)" fg:x="24500" fg:w="100"/><text x="82.7807%" y="335.50">alloc::stri..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (100 samples, 0.34%)</title><rect x="82.7703%" y="309" width="0.3378%" height="15" fill="rgb(212,68,40)" fg:x="24500" fg:w="100"/><text x="82.7807%" y="319.50">core::str::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (100 samples, 0.34%)</title><rect x="82.7703%" y="293" width="0.3378%" height="15" fill="rgb(254,125,32)" fg:x="24500" fg:w="100"/><text x="82.7807%" y="303.50">core::cmp::..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (100 samples, 0.34%)</title><rect x="82.7703%" y="277" width="0.3378%" height="15" fill="rgb(253,97,22)" fg:x="24500" fg:w="100"/><text x="82.7807%" y="287.50">core::slice..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (100 samples, 0.34%)</title><rect x="82.7703%" y="261" width="0.3378%" height="15" fill="rgb(241,101,14)" fg:x="24500" fg:w="100"/><text x="82.7807%" y="271.50">&lt;[A] as cor..</text></g><g><title>__memcmp_avx2_movbe (100 samples, 0.34%)</title><rect x="82.7703%" y="245" width="0.3378%" height="15" fill="rgb(238,103,29)" fg:x="24500" fg:w="100"/><text x="82.7807%" y="255.50">__memcmp_av..</text></g><g><title>flare_internals::passes::midend::typechecking::Solver::check_expr (400 samples, 1.35%)</title><rect x="82.0946%" y="421" width="1.3514%" height="15" fill="rgb(233,195,47)" fg:x="24300" fg:w="400"/><text x="82.1050%" y="431.50">flare_internals::passes::midend::typechecking::Solve..</text></g><g><title>alloc::alloc::exchange_malloc (100 samples, 0.34%)</title><rect x="83.1081%" y="405" width="0.3378%" height="15" fill="rgb(246,218,30)" fg:x="24600" fg:w="100"/><text x="83.1185%" y="415.50">alloc::allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.34%)</title><rect x="83.1081%" y="389" width="0.3378%" height="15" fill="rgb(219,145,47)" fg:x="24600" fg:w="100"/><text x="83.1185%" y="399.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.34%)</title><rect x="83.1081%" y="373" width="0.3378%" height="15" fill="rgb(243,12,26)" fg:x="24600" fg:w="100"/><text x="83.1185%" y="383.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (100 samples, 0.34%)</title><rect x="83.1081%" y="357" width="0.3378%" height="15" fill="rgb(214,87,16)" fg:x="24600" fg:w="100"/><text x="83.1185%" y="367.50">alloc::allo..</text></g><g><title>__rustc::__rdl_alloc (100 samples, 0.34%)</title><rect x="83.1081%" y="341" width="0.3378%" height="15" fill="rgb(208,99,42)" fg:x="24600" fg:w="100"/><text x="83.1185%" y="351.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.34%)</title><rect x="83.1081%" y="325" width="0.3378%" height="15" fill="rgb(253,99,2)" fg:x="24600" fg:w="100"/><text x="83.1185%" y="335.50">std::sys::a..</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="83.1081%" y="309" width="0.3378%" height="15" fill="rgb(220,168,23)" fg:x="24600" fg:w="100"/><text x="83.1185%" y="319.50">__GI___libc..</text></g><g><title>&lt;chumsky::combinator::Map&lt;A,OA,F&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="83.4459%" y="293" width="0.3378%" height="15" fill="rgb(242,38,24)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="303.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::combinator::Then&lt;A,B,OA,OB,E&gt; as chumsky::Parser&lt;I,(OA,OB),E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="83.4459%" y="277" width="0.3378%" height="15" fill="rgb(225,182,9)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="287.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::combinator::Or&lt;A,B&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="83.4459%" y="261" width="0.3378%" height="15" fill="rgb(243,178,37)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="271.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::primitive::Choice&lt;(Y_,Z_)&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="83.4459%" y="245" width="0.3378%" height="15" fill="rgb(232,139,19)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="255.50">&lt;chumsky::p..</text></g><g><title>&lt;chumsky::combinator::Collect&lt;A,O,C&gt; as chumsky::Parser&lt;I,C,E&gt;&gt;::go (100 samples, 0.34%)</title><rect x="83.4459%" y="229" width="0.3378%" height="15" fill="rgb(225,201,24)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="239.50">&lt;chumsky::c..</text></g><g><title>&lt;chumsky::private::Emit as chumsky::private::Mode&gt;::combine_mut (100 samples, 0.34%)</title><rect x="83.4459%" y="213" width="0.3378%" height="15" fill="rgb(221,47,46)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="223.50">&lt;chumsky::p..</text></g><g><title>&lt;chumsky::combinator::Collect&lt;A,O,C&gt; as chumsky::Parser&lt;I,C,E&gt;&gt;::go::{{closure}} (100 samples, 0.34%)</title><rect x="83.4459%" y="197" width="0.3378%" height="15" fill="rgb(249,23,13)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="207.50">&lt;chumsky::c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as chumsky::container::Container&lt;T&gt;&gt;::push (100 samples, 0.34%)</title><rect x="83.4459%" y="181" width="0.3378%" height="15" fill="rgb(219,9,5)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="191.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (100 samples, 0.34%)</title><rect x="83.4459%" y="165" width="0.3378%" height="15" fill="rgb(254,171,16)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="175.50">alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (100 samples, 0.34%)</title><rect x="83.4459%" y="149" width="0.3378%" height="15" fill="rgb(230,171,20)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="159.50">alloc::vec:..</text></g><g><title>core::ptr::write (100 samples, 0.34%)</title><rect x="83.4459%" y="133" width="0.3378%" height="15" fill="rgb(210,71,41)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="143.50">core::ptr::..</text></g><g><title>__memmove_avx_unaligned_erms (100 samples, 0.34%)</title><rect x="83.4459%" y="117" width="0.3378%" height="15" fill="rgb(206,173,20)" fg:x="24700" fg:w="100"/><text x="83.4564%" y="127.50">__memmove_a..</text></g><g><title>&lt;chumsky::combinator::ThenIgnore&lt;A,B,OB,E&gt; as chumsky::Parser&lt;I,OA,E&gt;&gt;::go (200 samples, 0.68%)</title><rect x="83.4459%" y="389" width="0.6757%" height="15" fill="rgb(233,88,34)" fg:x="24700" fg:w="200"/><text x="83.4564%" y="399.50">&lt;chumsky::combinator::The..</text></g><g><title>chumsky::blanket::&lt;impl chumsky::Parser&lt;I,O,E&gt; for &amp;T&gt;::go (200 samples, 0.68%)</title><rect x="83.4459%" y="373" width="0.6757%" height="15" fill="rgb(223,209,46)" fg:x="24700" fg:w="200"/><text x="83.4564%" y="383.50">chumsky::blanket::&lt;impl c..</text></g><g><title>&lt;chumsky::private::Emit as chumsky::private::Mode&gt;::invoke (200 samples, 0.68%)</title><rect x="83.4459%" y="357" width="0.6757%" height="15" fill="rgb(250,43,18)" fg:x="24700" fg:w="200"/><text x="83.4564%" y="367.50">&lt;chumsky::private::Emit a..</text></g><g><title>&lt;chumsky::combinator::ThenIgnore&lt;A,B,OB,E&gt; as chumsky::Parser&lt;I,OA,E&gt;&gt;::go_emit (200 samples, 0.68%)</title><rect x="83.4459%" y="341" width="0.6757%" height="15" fill="rgb(208,13,10)" fg:x="24700" fg:w="200"/><text x="83.4564%" y="351.50">&lt;chumsky::combinator::The..</text></g><g><title>&lt;chumsky::combinator::ThenIgnore&lt;A,B,OB,E&gt; as chumsky::Parser&lt;I,OA,E&gt;&gt;::go (200 samples, 0.68%)</title><rect x="83.4459%" y="325" width="0.6757%" height="15" fill="rgb(212,200,36)" fg:x="24700" fg:w="200"/><text x="83.4564%" y="335.50">&lt;chumsky::combinator::The..</text></g><g><title>&lt;chumsky::label::Labelled&lt;A,L&gt; as chumsky::Parser&lt;I,O,E&gt;&gt;::go (200 samples, 0.68%)</title><rect x="83.4459%" y="309" width="0.6757%" height="15" fill="rgb(225,90,30)" fg:x="24700" fg:w="200"/><text x="83.4564%" y="319.50">&lt;chumsky::label::Labelled..</text></g><g><title>&lt;chumsky::input::MappedInput&lt;T,S,I,F&gt; as chumsky::input::Input&gt;::span (100 samples, 0.34%)</title><rect x="83.7838%" y="293" width="0.3378%" height="15" fill="rgb(236,182,39)" fg:x="24800" fg:w="100"/><text x="83.7942%" y="303.50">&lt;chumsky::i..</text></g><g><title>chumsky::Parser::parse_with_state (300 samples, 1.01%)</title><rect x="83.4459%" y="405" width="1.0135%" height="15" fill="rgb(212,144,35)" fg:x="24700" fg:w="300"/><text x="83.4564%" y="415.50">chumsky::Parser::parse_with_state</text></g><g><title>chumsky::input::InputOwn&lt;I,E&gt;::new_state (100 samples, 0.34%)</title><rect x="84.1216%" y="389" width="0.3378%" height="15" fill="rgb(228,63,44)" fg:x="24900" fg:w="100"/><text x="84.1320%" y="399.50">chumsky::in..</text></g><g><title>flare_internals::passes::parser::lexer (100 samples, 0.34%)</title><rect x="84.4595%" y="405" width="0.3378%" height="15" fill="rgb(228,109,6)" fg:x="25000" fg:w="100"/><text x="84.4699%" y="415.50">flare_inter..</text></g><g><title>chumsky::Parser::boxed (100 samples, 0.34%)</title><rect x="84.4595%" y="389" width="0.3378%" height="15" fill="rgb(238,117,24)" fg:x="25000" fg:w="100"/><text x="84.4699%" y="399.50">chumsky::Pa..</text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (100 samples, 0.34%)</title><rect x="84.4595%" y="373" width="0.3378%" height="15" fill="rgb(242,26,26)" fg:x="25000" fg:w="100"/><text x="84.4699%" y="383.50">alloc::rc::..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (100 samples, 0.34%)</title><rect x="84.4595%" y="357" width="0.3378%" height="15" fill="rgb(221,92,48)" fg:x="25000" fg:w="100"/><text x="84.4699%" y="367.50">alloc::boxe..</text></g><g><title>alloc::alloc::exchange_malloc (100 samples, 0.34%)</title><rect x="84.4595%" y="341" width="0.3378%" height="15" fill="rgb(209,209,32)" fg:x="25000" fg:w="100"/><text x="84.4699%" y="351.50">alloc::allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.34%)</title><rect x="84.4595%" y="325" width="0.3378%" height="15" fill="rgb(221,70,22)" fg:x="25000" fg:w="100"/><text x="84.4699%" y="335.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.34%)</title><rect x="84.4595%" y="309" width="0.3378%" height="15" fill="rgb(248,145,5)" fg:x="25000" fg:w="100"/><text x="84.4699%" y="319.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (100 samples, 0.34%)</title><rect x="84.4595%" y="293" width="0.3378%" height="15" fill="rgb(226,116,26)" fg:x="25000" fg:w="100"/><text x="84.4699%" y="303.50">alloc::allo..</text></g><g><title>__rustc::__rdl_alloc (100 samples, 0.34%)</title><rect x="84.4595%" y="277" width="0.3378%" height="15" fill="rgb(244,5,17)" fg:x="25000" fg:w="100"/><text x="84.4699%" y="287.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.34%)</title><rect x="84.4595%" y="261" width="0.3378%" height="15" fill="rgb(252,159,33)" fg:x="25000" fg:w="100"/><text x="84.4699%" y="271.50">std::sys::a..</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="84.4595%" y="245" width="0.3378%" height="15" fill="rgb(206,71,0)" fg:x="25000" fg:w="100"/><text x="84.4699%" y="255.50">__GI___libc..</text></g><g><title>flare_internals::passes::parser::parse (500 samples, 1.69%)</title><rect x="83.4459%" y="421" width="1.6892%" height="15" fill="rgb(233,118,54)" fg:x="24700" fg:w="500"/><text x="83.4564%" y="431.50">flare_internals::passes::parser::parse</text></g><g><title>flare_internals::passes::parser::parser (100 samples, 0.34%)</title><rect x="84.7973%" y="405" width="0.3378%" height="15" fill="rgb(234,83,48)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="415.50">flare_inter..</text></g><g><title>chumsky::recursive::recursive (100 samples, 0.34%)</title><rect x="84.7973%" y="389" width="0.3378%" height="15" fill="rgb(228,3,54)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="399.50">chumsky::re..</text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (100 samples, 0.34%)</title><rect x="84.7973%" y="373" width="0.3378%" height="15" fill="rgb(226,155,13)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="383.50">alloc::rc::..</text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::new_cyclic_in (100 samples, 0.34%)</title><rect x="84.7973%" y="357" width="0.3378%" height="15" fill="rgb(241,28,37)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="367.50">alloc::rc::..</text></g><g><title>chumsky::recursive::recursive::{{closure}} (100 samples, 0.34%)</title><rect x="84.7973%" y="341" width="0.3378%" height="15" fill="rgb(233,93,10)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="351.50">chumsky::re..</text></g><g><title>flare_internals::passes::parser::parser::{{closure}} (100 samples, 0.34%)</title><rect x="84.7973%" y="325" width="0.3378%" height="15" fill="rgb(225,113,19)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="335.50">flare_inter..</text></g><g><title>chumsky::recursive::recursive (100 samples, 0.34%)</title><rect x="84.7973%" y="309" width="0.3378%" height="15" fill="rgb(241,2,18)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="319.50">chumsky::re..</text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (100 samples, 0.34%)</title><rect x="84.7973%" y="293" width="0.3378%" height="15" fill="rgb(228,207,21)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="303.50">alloc::rc::..</text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::new_cyclic_in (100 samples, 0.34%)</title><rect x="84.7973%" y="277" width="0.3378%" height="15" fill="rgb(213,211,35)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="287.50">alloc::rc::..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_in (100 samples, 0.34%)</title><rect x="84.7973%" y="261" width="0.3378%" height="15" fill="rgb(209,83,10)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="271.50">alloc::boxe..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (100 samples, 0.34%)</title><rect x="84.7973%" y="245" width="0.3378%" height="15" fill="rgb(209,164,1)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="255.50">alloc::boxe..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (100 samples, 0.34%)</title><rect x="84.7973%" y="229" width="0.3378%" height="15" fill="rgb(213,184,43)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="239.50">alloc::boxe..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.34%)</title><rect x="84.7973%" y="213" width="0.3378%" height="15" fill="rgb(231,61,34)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="223.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.34%)</title><rect x="84.7973%" y="197" width="0.3378%" height="15" fill="rgb(235,75,3)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="207.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (100 samples, 0.34%)</title><rect x="84.7973%" y="181" width="0.3378%" height="15" fill="rgb(220,106,47)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="191.50">alloc::allo..</text></g><g><title>__rustc::__rdl_alloc (100 samples, 0.34%)</title><rect x="84.7973%" y="165" width="0.3378%" height="15" fill="rgb(210,196,33)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="175.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.34%)</title><rect x="84.7973%" y="149" width="0.3378%" height="15" fill="rgb(229,154,42)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="159.50">std::sys::a..</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="84.7973%" y="133" width="0.3378%" height="15" fill="rgb(228,114,26)" fg:x="25100" fg:w="100"/><text x="84.8077%" y="143.50">__GI___libc..</text></g><g><title>louds_rs::louds::louds_impl::&lt;impl louds_rs::louds::Louds&gt;::validate_lbs (200 samples, 0.68%)</title><rect x="85.1351%" y="421" width="0.6757%" height="15" fill="rgb(208,144,1)" fg:x="25200" fg:w="200"/><text x="85.1456%" y="431.50">louds_rs::louds::louds_im..</text></g><g><title>fid_rs::fid::fid_impl::&lt;impl core::ops::index::Index&lt;u64&gt; for fid_rs::fid::Fid&gt;::index (100 samples, 0.34%)</title><rect x="85.4730%" y="405" width="0.3378%" height="15" fill="rgb(239,112,37)" fg:x="25300" fg:w="100"/><text x="85.4834%" y="415.50">fid_rs::fid..</text></g><g><title>fid_rs::fid::fid_impl::&lt;impl fid_rs::fid::Fid&gt;::rbv (100 samples, 0.34%)</title><rect x="85.4730%" y="389" width="0.3378%" height="15" fill="rgb(210,96,50)" fg:x="25300" fg:w="100"/><text x="85.4834%" y="399.50">fid_rs::fid..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (100 samples, 0.34%)</title><rect x="85.4730%" y="373" width="0.3378%" height="15" fill="rgb(222,178,2)" fg:x="25300" fg:w="100"/><text x="85.4834%" y="383.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (100 samples, 0.34%)</title><rect x="85.4730%" y="357" width="0.3378%" height="15" fill="rgb(226,74,18)" fg:x="25300" fg:w="100"/><text x="85.4834%" y="367.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (100 samples, 0.34%)</title><rect x="85.4730%" y="341" width="0.3378%" height="15" fill="rgb(225,67,54)" fg:x="25300" fg:w="100"/><text x="85.4834%" y="351.50">alloc::vec:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (100 samples, 0.34%)</title><rect x="85.8108%" y="421" width="0.3378%" height="15" fill="rgb(251,92,32)" fg:x="25400" fg:w="100"/><text x="85.8212%" y="431.50">rayon_core:..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (100 samples, 0.34%)</title><rect x="85.8108%" y="405" width="0.3378%" height="15" fill="rgb(228,149,22)" fg:x="25400" fg:w="100"/><text x="85.8212%" y="415.50">core::tuple..</text></g><g><title>core::ptr::const_ptr::&lt;impl core::cmp::PartialEq for *const T&gt;::eq (100 samples, 0.34%)</title><rect x="85.8108%" y="389" width="0.3378%" height="15" fill="rgb(243,54,13)" fg:x="25400" fg:w="100"/><text x="85.8212%" y="399.50">core::ptr::..</text></g><g><title>rayon_core::registry::Registry::new (200 samples, 0.68%)</title><rect x="86.1486%" y="421" width="0.6757%" height="15" fill="rgb(243,180,28)" fg:x="25500" fg:w="200"/><text x="86.1591%" y="431.50">rayon_core::registry::Reg..</text></g><g><title>core::iter::traits::iterator::Iterator::unzip (100 samples, 0.34%)</title><rect x="86.4865%" y="405" width="0.3378%" height="15" fill="rgb(208,167,24)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="415.50">core::iter:..</text></g><g><title>&lt;(EB,EA) as core::iter::traits::collect::Extend&lt;(B,A)&gt;&gt;::extend (100 samples, 0.34%)</title><rect x="86.4865%" y="389" width="0.3378%" height="15" fill="rgb(245,73,45)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="399.50">&lt;(EB,EA) as..</text></g><g><title>&lt;Iter as core::iter::traits::collect::TraitB&lt;EB,EA&gt;&gt;::extend (100 samples, 0.34%)</title><rect x="86.4865%" y="373" width="0.3378%" height="15" fill="rgb(237,203,48)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="383.50">&lt;Iter as co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (100 samples, 0.34%)</title><rect x="86.4865%" y="357" width="0.3378%" height="15" fill="rgb(211,197,16)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="367.50">&lt;core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (100 samples, 0.34%)</title><rect x="86.4865%" y="341" width="0.3378%" height="15" fill="rgb(243,99,51)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="351.50">core::iter:..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (100 samples, 0.34%)</title><rect x="86.4865%" y="325" width="0.3378%" height="15" fill="rgb(215,123,29)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="335.50">core::iter:..</text></g><g><title>rayon_core::registry::Registry::new::{{closure}} (100 samples, 0.34%)</title><rect x="86.4865%" y="309" width="0.3378%" height="15" fill="rgb(239,186,37)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="319.50">rayon_core:..</text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::new_lifo (100 samples, 0.34%)</title><rect x="86.4865%" y="293" width="0.3378%" height="15" fill="rgb(252,136,39)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="303.50">crossbeam_d..</text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (100 samples, 0.34%)</title><rect x="86.4865%" y="277" width="0.3378%" height="15" fill="rgb(223,213,32)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="287.50">alloc::sync..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (100 samples, 0.34%)</title><rect x="86.4865%" y="261" width="0.3378%" height="15" fill="rgb(233,115,5)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="271.50">alloc::boxe..</text></g><g><title>alloc::alloc::exchange_malloc (100 samples, 0.34%)</title><rect x="86.4865%" y="245" width="0.3378%" height="15" fill="rgb(207,226,44)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="255.50">alloc::allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.34%)</title><rect x="86.4865%" y="229" width="0.3378%" height="15" fill="rgb(208,126,0)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="239.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.34%)</title><rect x="86.4865%" y="213" width="0.3378%" height="15" fill="rgb(244,66,21)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="223.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (100 samples, 0.34%)</title><rect x="86.4865%" y="197" width="0.3378%" height="15" fill="rgb(222,97,12)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="207.50">alloc::allo..</text></g><g><title>__rustc::__rdl_alloc (100 samples, 0.34%)</title><rect x="86.4865%" y="181" width="0.3378%" height="15" fill="rgb(219,213,19)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="191.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.34%)</title><rect x="86.4865%" y="165" width="0.3378%" height="15" fill="rgb(252,169,30)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="175.50">std::sys::a..</text></g><g><title>std::sys::alloc::unix::aligned_malloc (100 samples, 0.34%)</title><rect x="86.4865%" y="149" width="0.3378%" height="15" fill="rgb(206,32,51)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="159.50">std::sys::a..</text></g><g><title>__posix_memalign (100 samples, 0.34%)</title><rect x="86.4865%" y="133" width="0.3378%" height="15" fill="rgb(250,172,42)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="143.50">__posix_mem..</text></g><g><title>_int_memalign (100 samples, 0.34%)</title><rect x="86.4865%" y="117" width="0.3378%" height="15" fill="rgb(209,34,43)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="127.50">_int_memali..</text></g><g><title>_int_malloc (100 samples, 0.34%)</title><rect x="86.4865%" y="101" width="0.3378%" height="15" fill="rgb(223,11,35)" fg:x="25600" fg:w="100"/><text x="86.4969%" y="111.50">_int_malloc</text></g><g><title>rayon_core::registry::WorkerThread::find_work (100 samples, 0.34%)</title><rect x="86.8243%" y="421" width="0.3378%" height="15" fill="rgb(251,219,26)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="431.50">rayon_core:..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (100 samples, 0.34%)</title><rect x="86.8243%" y="405" width="0.3378%" height="15" fill="rgb(231,119,3)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="415.50">core::optio..</text></g><g><title>rayon_core::registry::WorkerThread::find_work::{{closure}} (100 samples, 0.34%)</title><rect x="86.8243%" y="389" width="0.3378%" height="15" fill="rgb(216,97,11)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="399.50">rayon_core:..</text></g><g><title>rayon_core::registry::WorkerThread::steal (100 samples, 0.34%)</title><rect x="86.8243%" y="373" width="0.3378%" height="15" fill="rgb(223,59,9)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="383.50">rayon_core:..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (100 samples, 0.34%)</title><rect x="86.8243%" y="357" width="0.3378%" height="15" fill="rgb(233,93,31)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="367.50">core::iter:..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (100 samples, 0.34%)</title><rect x="86.8243%" y="341" width="0.3378%" height="15" fill="rgb(239,81,33)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="351.50">&lt;core::iter..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (100 samples, 0.34%)</title><rect x="86.8243%" y="325" width="0.3378%" height="15" fill="rgb(213,120,34)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="335.50">&lt;core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (100 samples, 0.34%)</title><rect x="86.8243%" y="309" width="0.3378%" height="15" fill="rgb(243,49,53)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="319.50">core::iter:..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (100 samples, 0.34%)</title><rect x="86.8243%" y="293" width="0.3378%" height="15" fill="rgb(247,216,33)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="303.50">core::iter:..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (100 samples, 0.34%)</title><rect x="86.8243%" y="277" width="0.3378%" height="15" fill="rgb(226,26,14)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="287.50">&lt;core::ops:..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (100 samples, 0.34%)</title><rect x="86.8243%" y="261" width="0.3378%" height="15" fill="rgb(215,49,53)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="271.50">&lt;usize as c..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (100 samples, 0.34%)</title><rect x="86.8243%" y="245" width="0.3378%" height="15" fill="rgb(245,162,40)" fg:x="25700" fg:w="100"/><text x="86.8347%" y="255.50">core::num::..</text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (100 samples, 0.34%)</title><rect x="87.1622%" y="421" width="0.3378%" height="15" fill="rgb(229,68,17)" fg:x="25800" fg:w="100"/><text x="87.1726%" y="431.50">rayon_core:..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (200 samples, 0.68%)</title><rect x="87.5000%" y="421" width="0.6757%" height="15" fill="rgb(213,182,10)" fg:x="25900" fg:w="200"/><text x="87.5104%" y="431.50">rayon_core::registry::Wor..</text></g><g><title>rayon_core::sleep::Sleep::no_work_found (200 samples, 0.68%)</title><rect x="87.5000%" y="405" width="0.6757%" height="15" fill="rgb(245,125,30)" fg:x="25900" fg:w="200"/><text x="87.5104%" y="415.50">rayon_core::sleep::Sleep:..</text></g><g><title>std::thread::yield_now (200 samples, 0.68%)</title><rect x="87.5000%" y="389" width="0.6757%" height="15" fill="rgb(232,202,2)" fg:x="25900" fg:w="200"/><text x="87.5104%" y="399.50">std::thread::yield_now</text></g><g><title>std::sys::pal::unix::thread::Thread::yield_now (200 samples, 0.68%)</title><rect x="87.5000%" y="373" width="0.6757%" height="15" fill="rgb(237,140,51)" fg:x="25900" fg:w="200"/><text x="87.5104%" y="383.50">std::sys::pal::unix::thre..</text></g><g><title>__GI___sched_yield (200 samples, 0.68%)</title><rect x="87.5000%" y="357" width="0.6757%" height="15" fill="rgb(236,157,25)" fg:x="25900" fg:w="200"/><text x="87.5104%" y="367.50">__GI___sched_yield</text></g><g><title>rust_psm_stack_pointer (100 samples, 0.34%)</title><rect x="88.1757%" y="421" width="0.3378%" height="15" fill="rgb(219,209,0)" fg:x="26100" fg:w="100"/><text x="88.1861%" y="431.50">rust_psm_st..</text></g><g><title>std::env::_var_os (100 samples, 0.34%)</title><rect x="88.5135%" y="421" width="0.3378%" height="15" fill="rgb(240,116,54)" fg:x="26200" fg:w="100"/><text x="88.5239%" y="431.50">std::env::_..</text></g><g><title>std::sys::env::unix::getenv (100 samples, 0.34%)</title><rect x="88.5135%" y="405" width="0.3378%" height="15" fill="rgb(216,10,36)" fg:x="26200" fg:w="100"/><text x="88.5239%" y="415.50">std::sys::e..</text></g><g><title>core::result::Result&lt;T,E&gt;::ok (100 samples, 0.34%)</title><rect x="88.5135%" y="389" width="0.3378%" height="15" fill="rgb(222,72,44)" fg:x="26200" fg:w="100"/><text x="88.5239%" y="399.50">core::resul..</text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (100 samples, 0.34%)</title><rect x="88.8514%" y="341" width="0.3378%" height="15" fill="rgb(232,159,9)" fg:x="26300" fg:w="100"/><text x="88.8618%" y="351.50">core::ffi::..</text></g><g><title>core::slice::memchr::memchr (100 samples, 0.34%)</title><rect x="88.8514%" y="325" width="0.3378%" height="15" fill="rgb(210,39,32)" fg:x="26300" fg:w="100"/><text x="88.8618%" y="335.50">core::slice..</text></g><g><title>core::slice::memchr::memchr_aligned (100 samples, 0.34%)</title><rect x="88.8514%" y="309" width="0.3378%" height="15" fill="rgb(216,194,45)" fg:x="26300" fg:w="100"/><text x="88.8618%" y="319.50">core::slice..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (100 samples, 0.34%)</title><rect x="88.8514%" y="293" width="0.3378%" height="15" fill="rgb(218,18,35)" fg:x="26300" fg:w="100"/><text x="88.8618%" y="303.50">core::slice..</text></g><g><title>core::slice::memchr::memchr_naive (100 samples, 0.34%)</title><rect x="88.8514%" y="277" width="0.3378%" height="15" fill="rgb(207,83,51)" fg:x="26300" fg:w="100"/><text x="88.8618%" y="287.50">core::slice..</text></g><g><title>std::fs::OpenOptions::_open (200 samples, 0.68%)</title><rect x="88.8514%" y="421" width="0.6757%" height="15" fill="rgb(225,63,43)" fg:x="26300" fg:w="200"/><text x="88.8618%" y="431.50">std::fs::OpenOptions::_op..</text></g><g><title>std::sys::fs::unix::File::open (200 samples, 0.68%)</title><rect x="88.8514%" y="405" width="0.6757%" height="15" fill="rgb(207,57,36)" fg:x="26300" fg:w="200"/><text x="88.8618%" y="415.50">std::sys::fs::unix::File:..</text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (200 samples, 0.68%)</title><rect x="88.8514%" y="389" width="0.6757%" height="15" fill="rgb(216,99,33)" fg:x="26300" fg:w="200"/><text x="88.8618%" y="399.50">std::sys::pal::common::sm..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (200 samples, 0.68%)</title><rect x="88.8514%" y="373" width="0.6757%" height="15" fill="rgb(225,42,16)" fg:x="26300" fg:w="200"/><text x="88.8618%" y="383.50">std::sys::pal::common::sm..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (200 samples, 0.68%)</title><rect x="88.8514%" y="357" width="0.6757%" height="15" fill="rgb(220,201,45)" fg:x="26300" fg:w="200"/><text x="88.8618%" y="367.50">std::sys::pal::common::sm..</text></g><g><title>std::sys::fs::unix::File::open::{{closure}} (100 samples, 0.34%)</title><rect x="89.1892%" y="341" width="0.3378%" height="15" fill="rgb(225,33,4)" fg:x="26400" fg:w="100"/><text x="89.1996%" y="351.50">std::sys::f..</text></g><g><title>std::sys::fs::unix::File::open_c (100 samples, 0.34%)</title><rect x="89.1892%" y="325" width="0.3378%" height="15" fill="rgb(224,33,50)" fg:x="26400" fg:w="100"/><text x="89.1996%" y="335.50">std::sys::f..</text></g><g><title>std::sys::pal::unix::cvt_r (100 samples, 0.34%)</title><rect x="89.1892%" y="309" width="0.3378%" height="15" fill="rgb(246,198,51)" fg:x="26400" fg:w="100"/><text x="89.1996%" y="319.50">std::sys::p..</text></g><g><title>std::sys::fs::unix::File::open_c::{{closure}} (100 samples, 0.34%)</title><rect x="89.1892%" y="293" width="0.3378%" height="15" fill="rgb(205,22,4)" fg:x="26400" fg:w="100"/><text x="89.1996%" y="303.50">std::sys::f..</text></g><g><title>__libc_open64 (100 samples, 0.34%)</title><rect x="89.1892%" y="277" width="0.3378%" height="15" fill="rgb(206,3,8)" fg:x="26400" fg:w="100"/><text x="89.1996%" y="287.50">__libc_open..</text></g><g><title>std::io::default_read_to_end::small_probe_read (200 samples, 0.68%)</title><rect x="89.5270%" y="421" width="0.6757%" height="15" fill="rgb(251,23,15)" fg:x="26500" fg:w="200"/><text x="89.5374%" y="431.50">std::io::default_read_to_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (200 samples, 0.68%)</title><rect x="89.5270%" y="405" width="0.6757%" height="15" fill="rgb(252,88,28)" fg:x="26500" fg:w="200"/><text x="89.5374%" y="415.50">alloc::vec::Vec&lt;T,A&gt;::ext..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (200 samples, 0.68%)</title><rect x="89.5270%" y="389" width="0.6757%" height="15" fill="rgb(212,127,14)" fg:x="26500" fg:w="200"/><text x="89.5374%" y="399.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (200 samples, 0.68%)</title><rect x="89.5270%" y="373" width="0.6757%" height="15" fill="rgb(247,145,37)" fg:x="26500" fg:w="200"/><text x="89.5374%" y="383.50">alloc::vec::Vec&lt;T,A&gt;::app..</text></g><g><title>core::ptr::copy_nonoverlapping (200 samples, 0.68%)</title><rect x="89.5270%" y="357" width="0.6757%" height="15" fill="rgb(209,117,53)" fg:x="26500" fg:w="200"/><text x="89.5374%" y="367.50">core::ptr::copy_nonoverla..</text></g><g><title>__memmove_avx_unaligned_erms (200 samples, 0.68%)</title><rect x="89.5270%" y="341" width="0.6757%" height="15" fill="rgb(212,90,42)" fg:x="26500" fg:w="200"/><text x="89.5374%" y="351.50">__memmove_avx_unaligned_e..</text></g><g><title>std::io::default_read_to_end (100 samples, 0.34%)</title><rect x="90.2027%" y="421" width="0.3378%" height="15" fill="rgb(218,164,37)" fg:x="26700" fg:w="100"/><text x="90.2131%" y="431.50">std::io::de..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (100 samples, 0.34%)</title><rect x="90.2027%" y="405" width="0.3378%" height="15" fill="rgb(246,65,34)" fg:x="26700" fg:w="100"/><text x="90.2131%" y="415.50">&lt;&amp;std::fs::..</text></g><g><title>std::sys::fs::unix::File::read_buf (100 samples, 0.34%)</title><rect x="90.2027%" y="389" width="0.3378%" height="15" fill="rgb(231,100,33)" fg:x="26700" fg:w="100"/><text x="90.2131%" y="399.50">std::sys::f..</text></g><g><title>std::sys::fd::unix::FileDesc::read_buf (100 samples, 0.34%)</title><rect x="90.2027%" y="373" width="0.3378%" height="15" fill="rgb(228,126,14)" fg:x="26700" fg:w="100"/><text x="90.2131%" y="383.50">std::sys::f..</text></g><g><title>__libc_read (100 samples, 0.34%)</title><rect x="90.2027%" y="357" width="0.3378%" height="15" fill="rgb(215,173,21)" fg:x="26700" fg:w="100"/><text x="90.2131%" y="367.50">__libc_read</text></g><g><title>__libc_read (100 samples, 0.34%)</title><rect x="90.2027%" y="341" width="0.3378%" height="15" fill="rgb(210,6,40)" fg:x="26700" fg:w="100"/><text x="90.2131%" y="351.50">__libc_read</text></g><g><title>_IO_new_fopen (400 samples, 1.35%)</title><rect x="90.5405%" y="213" width="1.3514%" height="15" fill="rgb(212,48,18)" fg:x="26800" fg:w="400"/><text x="90.5510%" y="223.50">_IO_new_fopen</text></g><g><title>malloc_hook_ini (400 samples, 1.35%)</title><rect x="90.5405%" y="197" width="1.3514%" height="15" fill="rgb(230,214,11)" fg:x="26800" fg:w="400"/><text x="90.5510%" y="207.50">malloc_hook_ini</text></g><g><title>ptmalloc_init.part.0 (400 samples, 1.35%)</title><rect x="90.5405%" y="181" width="1.3514%" height="15" fill="rgb(254,105,39)" fg:x="26800" fg:w="400"/><text x="90.5510%" y="191.50">ptmalloc_init.part.0</text></g><g><title>__GI__dl_addr (400 samples, 1.35%)</title><rect x="90.5405%" y="165" width="1.3514%" height="15" fill="rgb(245,158,5)" fg:x="26800" fg:w="400"/><text x="90.5510%" y="175.50">__GI__dl_addr</text></g><g><title>std::rt::lang_start_internal (500 samples, 1.69%)</title><rect x="90.5405%" y="421" width="1.6892%" height="15" fill="rgb(249,208,11)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="431.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (500 samples, 1.69%)</title><rect x="90.5405%" y="405" width="1.6892%" height="15" fill="rgb(210,39,28)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::catch_unwind (500 samples, 1.69%)</title><rect x="90.5405%" y="389" width="1.6892%" height="15" fill="rgb(211,56,53)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="399.50">std::panicking::catch_unwind</text></g><g><title>std::panicking::catch_unwind::do_call (500 samples, 1.69%)</title><rect x="90.5405%" y="373" width="1.6892%" height="15" fill="rgb(226,201,30)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="383.50">std::panicking::catch_unwind::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (500 samples, 1.69%)</title><rect x="90.5405%" y="357" width="1.6892%" height="15" fill="rgb(239,101,34)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="367.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (500 samples, 1.69%)</title><rect x="90.5405%" y="341" width="1.6892%" height="15" fill="rgb(226,209,5)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="351.50">std::rt::init</text></g><g><title>std::sys::pal::unix::init (500 samples, 1.69%)</title><rect x="90.5405%" y="325" width="1.6892%" height="15" fill="rgb(250,105,47)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="335.50">std::sys::pal::unix::init</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::init (500 samples, 1.69%)</title><rect x="90.5405%" y="309" width="1.6892%" height="15" fill="rgb(230,72,3)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="319.50">std::sys::pal::unix::stack_overflow::imp::init</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::install_main_guard (500 samples, 1.69%)</title><rect x="90.5405%" y="293" width="1.6892%" height="15" fill="rgb(232,218,39)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="303.50">std::sys::pal::unix::stack_overflow::imp::install_main_guard</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::install_main_guard_linux (500 samples, 1.69%)</title><rect x="90.5405%" y="277" width="1.6892%" height="15" fill="rgb(248,166,6)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="287.50">std::sys::pal::unix::stack_overflow::imp::install_main_guard_linux</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::stack_start_aligned (500 samples, 1.69%)</title><rect x="90.5405%" y="261" width="1.6892%" height="15" fill="rgb(247,89,20)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="271.50">std::sys::pal::unix::stack_overflow::imp::stack_start_aligned</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack_start (500 samples, 1.69%)</title><rect x="90.5405%" y="245" width="1.6892%" height="15" fill="rgb(248,130,54)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="255.50">std::sys::pal::unix::stack_overflow::imp::get_stack_start</text></g><g><title>pthread_getattr_np (500 samples, 1.69%)</title><rect x="90.5405%" y="229" width="1.6892%" height="15" fill="rgb(234,196,4)" fg:x="26800" fg:w="500"/><text x="90.5510%" y="239.50">pthread_getattr_np</text></g><g><title>__GI___isoc99_sscanf (100 samples, 0.34%)</title><rect x="91.8919%" y="213" width="0.3378%" height="15" fill="rgb(250,143,31)" fg:x="27200" fg:w="100"/><text x="91.9023%" y="223.50">__GI___isoc..</text></g><g><title>__vfscanf_internal (100 samples, 0.34%)</title><rect x="91.8919%" y="197" width="0.3378%" height="15" fill="rgb(211,110,34)" fg:x="27200" fg:w="100"/><text x="91.9023%" y="207.50">__vfscanf_i..</text></g><g><title>__GI_____strtoull_l_internal (100 samples, 0.34%)</title><rect x="91.8919%" y="181" width="0.3378%" height="15" fill="rgb(215,124,48)" fg:x="27200" fg:w="100"/><text x="91.9023%" y="191.50">__GI_____st..</text></g><g><title>std::sys::env::unix::setenv::{{closure}}::{{closure}} (100 samples, 0.34%)</title><rect x="92.2297%" y="421" width="0.3378%" height="15" fill="rgb(216,46,13)" fg:x="27300" fg:w="100"/><text x="92.2401%" y="431.50">std::sys::e..</text></g><g><title>__add_to_environ (100 samples, 0.34%)</title><rect x="92.2297%" y="405" width="0.3378%" height="15" fill="rgb(205,184,25)" fg:x="27300" fg:w="100"/><text x="92.2401%" y="415.50">__add_to_en..</text></g><g><title>__strncmp_avx2 (100 samples, 0.34%)</title><rect x="92.2297%" y="389" width="0.3378%" height="15" fill="rgb(228,1,10)" fg:x="27300" fg:w="100"/><text x="92.2401%" y="399.50">__strncmp_a..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (100 samples, 0.34%)</title><rect x="92.5676%" y="421" width="0.3378%" height="15" fill="rgb(213,116,27)" fg:x="27400" fg:w="100"/><text x="92.5780%" y="431.50">std::sys::p..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::sigstack_size (100 samples, 0.34%)</title><rect x="92.5676%" y="405" width="0.3378%" height="15" fill="rgb(241,95,50)" fg:x="27400" fg:w="100"/><text x="92.5780%" y="415.50">std::sys::p..</text></g><g><title>__GI___getauxval (100 samples, 0.34%)</title><rect x="92.5676%" y="389" width="0.3378%" height="15" fill="rgb(238,48,32)" fg:x="27400" fg:w="100"/><text x="92.5780%" y="399.50">__GI___geta..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (100 samples, 0.34%)</title><rect x="92.9054%" y="421" width="0.3378%" height="15" fill="rgb(235,113,49)" fg:x="27500" fg:w="100"/><text x="92.9158%" y="431.50">std::sys::p..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::current_guard (100 samples, 0.34%)</title><rect x="92.9054%" y="405" width="0.3378%" height="15" fill="rgb(205,127,43)" fg:x="27500" fg:w="100"/><text x="92.9158%" y="415.50">std::sys::p..</text></g><g><title>pthread_getattr_np (100 samples, 0.34%)</title><rect x="92.9054%" y="389" width="0.3378%" height="15" fill="rgb(250,162,2)" fg:x="27500" fg:w="100"/><text x="92.9158%" y="399.50">pthread_get..</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="92.9054%" y="373" width="0.3378%" height="15" fill="rgb(220,13,41)" fg:x="27500" fg:w="100"/><text x="92.9158%" y="383.50">__GI___libc..</text></g><g><title>__GI__dl_allocate_tls_init (100 samples, 0.34%)</title><rect x="93.2432%" y="373" width="0.3378%" height="15" fill="rgb(249,221,25)" fg:x="27600" fg:w="100"/><text x="93.2537%" y="383.50">__GI__dl_al..</text></g><g><title>allocate_stack (200 samples, 0.68%)</title><rect x="93.2432%" y="389" width="0.6757%" height="15" fill="rgb(215,208,19)" fg:x="27600" fg:w="200"/><text x="93.2537%" y="399.50">allocate_stack</text></g><g><title>_dl_runtime_resolve_xsavec (100 samples, 0.34%)</title><rect x="93.5811%" y="373" width="0.3378%" height="15" fill="rgb(236,175,2)" fg:x="27700" fg:w="100"/><text x="93.5915%" y="383.50">_dl_runtime..</text></g><g><title>_dl_fixup (100 samples, 0.34%)</title><rect x="93.5811%" y="357" width="0.3378%" height="15" fill="rgb(241,52,2)" fg:x="27700" fg:w="100"/><text x="93.5915%" y="367.50">_dl_fixup</text></g><g><title>_dl_lookup_symbol_x (100 samples, 0.34%)</title><rect x="93.5811%" y="341" width="0.3378%" height="15" fill="rgb(248,140,14)" fg:x="27700" fg:w="100"/><text x="93.5915%" y="351.50">_dl_lookup_..</text></g><g><title>__pthread_create_2_1 (300 samples, 1.01%)</title><rect x="93.2432%" y="405" width="1.0135%" height="15" fill="rgb(253,22,42)" fg:x="27600" fg:w="300"/><text x="93.2537%" y="415.50">__pthread_create_2_1</text></g><g><title>create_thread (100 samples, 0.34%)</title><rect x="93.9189%" y="389" width="0.3378%" height="15" fill="rgb(234,61,47)" fg:x="27800" fg:w="100"/><text x="93.9293%" y="399.50">create_thre..</text></g><g><title>__GI___clone (100 samples, 0.34%)</title><rect x="93.9189%" y="373" width="0.3378%" height="15" fill="rgb(208,226,15)" fg:x="27800" fg:w="100"/><text x="93.9293%" y="383.50">__GI___clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new (400 samples, 1.35%)</title><rect x="93.2432%" y="421" width="1.3514%" height="15" fill="rgb(217,221,4)" fg:x="27600" fg:w="400"/><text x="93.2537%" y="431.50">std::sys::pal::unix::thread::Thread::new</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (100 samples, 0.34%)</title><rect x="94.2568%" y="405" width="0.3378%" height="15" fill="rgb(212,174,34)" fg:x="27900" fg:w="100"/><text x="94.2672%" y="415.50">alloc::boxe..</text></g><g><title>alloc::alloc::exchange_malloc (100 samples, 0.34%)</title><rect x="94.2568%" y="389" width="0.3378%" height="15" fill="rgb(253,83,4)" fg:x="27900" fg:w="100"/><text x="94.2672%" y="399.50">alloc::allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.34%)</title><rect x="94.2568%" y="373" width="0.3378%" height="15" fill="rgb(250,195,49)" fg:x="27900" fg:w="100"/><text x="94.2672%" y="383.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.34%)</title><rect x="94.2568%" y="357" width="0.3378%" height="15" fill="rgb(241,192,25)" fg:x="27900" fg:w="100"/><text x="94.2672%" y="367.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (100 samples, 0.34%)</title><rect x="94.2568%" y="341" width="0.3378%" height="15" fill="rgb(208,124,10)" fg:x="27900" fg:w="100"/><text x="94.2672%" y="351.50">alloc::allo..</text></g><g><title>__rustc::__rdl_alloc (100 samples, 0.34%)</title><rect x="94.2568%" y="325" width="0.3378%" height="15" fill="rgb(222,33,0)" fg:x="27900" fg:w="100"/><text x="94.2672%" y="335.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.34%)</title><rect x="94.2568%" y="309" width="0.3378%" height="15" fill="rgb(234,209,28)" fg:x="27900" fg:w="100"/><text x="94.2672%" y="319.50">std::sys::a..</text></g><g><title>__GI___libc_malloc (100 samples, 0.34%)</title><rect x="94.2568%" y="293" width="0.3378%" height="15" fill="rgb(224,11,23)" fg:x="27900" fg:w="100"/><text x="94.2672%" y="303.50">__GI___libc..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (100 samples, 0.34%)</title><rect x="94.5946%" y="421" width="0.3378%" height="15" fill="rgb(232,99,1)" fg:x="28000" fg:w="100"/><text x="94.6050%" y="431.50">std::sys::p..</text></g><g><title>__clock_gettime_2 (100 samples, 0.34%)</title><rect x="94.5946%" y="405" width="0.3378%" height="15" fill="rgb(237,95,45)" fg:x="28000" fg:w="100"/><text x="94.6050%" y="415.50">__clock_get..</text></g><g><title>__GI__dl_catch_error (100 samples, 0.34%)</title><rect x="94.9324%" y="357" width="0.3378%" height="15" fill="rgb(208,109,11)" fg:x="28100" fg:w="100"/><text x="94.9428%" y="367.50">__GI__dl_ca..</text></g><g><title>__GI__dl_catch_exception (100 samples, 0.34%)</title><rect x="94.9324%" y="341" width="0.3378%" height="15" fill="rgb(216,190,48)" fg:x="28100" fg:w="100"/><text x="94.9428%" y="351.50">__GI__dl_ca..</text></g><g><title>dlsym_doit (100 samples, 0.34%)</title><rect x="94.9324%" y="325" width="0.3378%" height="15" fill="rgb(251,171,36)" fg:x="28100" fg:w="100"/><text x="94.9428%" y="335.50">dlsym_doit</text></g><g><title>_dl_sym (100 samples, 0.34%)</title><rect x="94.9324%" y="309" width="0.3378%" height="15" fill="rgb(230,62,22)" fg:x="28100" fg:w="100"/><text x="94.9428%" y="319.50">_dl_sym</text></g><g><title>_dl_lookup_symbol_x (100 samples, 0.34%)</title><rect x="94.9324%" y="293" width="0.3378%" height="15" fill="rgb(225,114,35)" fg:x="28100" fg:w="100"/><text x="94.9428%" y="303.50">_dl_lookup_..</text></g><g><title>do_lookup_x (100 samples, 0.34%)</title><rect x="94.9324%" y="277" width="0.3378%" height="15" fill="rgb(215,118,42)" fg:x="28100" fg:w="100"/><text x="94.9428%" y="287.50">do_lookup_x</text></g><g><title>std::sys::pal::unix::weak::DlsymWeak&lt;F&gt;::initialize (200 samples, 0.68%)</title><rect x="94.9324%" y="421" width="0.6757%" height="15" fill="rgb(243,119,21)" fg:x="28100" fg:w="200"/><text x="94.9428%" y="431.50">std::sys::pal::unix::weak..</text></g><g><title>std::sys::pal::unix::weak::fetch (200 samples, 0.68%)</title><rect x="94.9324%" y="405" width="0.6757%" height="15" fill="rgb(252,177,53)" fg:x="28100" fg:w="200"/><text x="94.9428%" y="415.50">std::sys::pal::unix::weak..</text></g><g><title>__dlsym (200 samples, 0.68%)</title><rect x="94.9324%" y="389" width="0.6757%" height="15" fill="rgb(237,209,29)" fg:x="28100" fg:w="200"/><text x="94.9428%" y="399.50">__dlsym</text></g><g><title>_dlerror_run (200 samples, 0.68%)</title><rect x="94.9324%" y="373" width="0.6757%" height="15" fill="rgb(212,65,23)" fg:x="28100" fg:w="200"/><text x="94.9428%" y="383.50">_dlerror_run</text></g><g><title>__pthread_once_slow (100 samples, 0.34%)</title><rect x="95.2703%" y="357" width="0.3378%" height="15" fill="rgb(230,222,46)" fg:x="28200" fg:w="100"/><text x="95.2807%" y="367.50">__pthread_o..</text></g><g><title>futex_wake (100 samples, 0.34%)</title><rect x="95.2703%" y="341" width="0.3378%" height="15" fill="rgb(215,135,32)" fg:x="28200" fg:w="100"/><text x="95.2807%" y="351.50">futex_wake</text></g><g><title>_IO_new_fopen (100 samples, 0.34%)</title><rect x="95.6081%" y="325" width="0.3378%" height="15" fill="rgb(246,101,22)" fg:x="28300" fg:w="100"/><text x="95.6185%" y="335.50">_IO_new_fop..</text></g><g><title>_IO_new_file_init_internal (100 samples, 0.34%)</title><rect x="95.6081%" y="309" width="0.3378%" height="15" fill="rgb(206,107,13)" fg:x="28300" fg:w="100"/><text x="95.6185%" y="319.50">_IO_new_fil..</text></g><g><title>__GI__IO_link_in (100 samples, 0.34%)</title><rect x="95.6081%" y="293" width="0.3378%" height="15" fill="rgb(250,100,44)" fg:x="28300" fg:w="100"/><text x="95.6185%" y="303.50">__GI__IO_li..</text></g><g><title>_pthread_cleanup_push_defer (100 samples, 0.34%)</title><rect x="95.6081%" y="277" width="0.3378%" height="15" fill="rgb(231,147,38)" fg:x="28300" fg:w="100"/><text x="95.6185%" y="287.50">_pthread_cl..</text></g><g><title>__GI_____strtoull_l_internal (200 samples, 0.68%)</title><rect x="96.6216%" y="293" width="0.6757%" height="15" fill="rgb(229,8,40)" fg:x="28600" fg:w="200"/><text x="96.6320%" y="303.50">__GI_____strtoull_l_inter..</text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init_slow (600 samples, 2.03%)</title><rect x="95.6081%" y="421" width="2.0270%" height="15" fill="rgb(221,135,30)" fg:x="28300" fg:w="600"/><text x="95.6185%" y="431.50">std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init_slow</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (600 samples, 2.03%)</title><rect x="95.6081%" y="405" width="2.0270%" height="15" fill="rgb(249,193,18)" fg:x="28300" fg:w="600"/><text x="95.6185%" y="415.50">core::option::Option&lt;T&gt;::unwrap_or_else</text></g><g><title>core::ops::function::FnOnce::call_once (600 samples, 2.03%)</title><rect x="95.6081%" y="389" width="2.0270%" height="15" fill="rgb(209,133,39)" fg:x="28300" fg:w="600"/><text x="95.6185%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>stacker::STACK_LIMIT::__init (600 samples, 2.03%)</title><rect x="95.6081%" y="373" width="2.0270%" height="15" fill="rgb(232,100,14)" fg:x="28300" fg:w="600"/><text x="95.6185%" y="383.50">stacker::STACK_LIMIT::__init</text></g><g><title>stacker::backends::unix::guess_os_stack_limit (600 samples, 2.03%)</title><rect x="95.6081%" y="357" width="2.0270%" height="15" fill="rgb(224,185,1)" fg:x="28300" fg:w="600"/><text x="95.6185%" y="367.50">stacker::backends::unix::guess_os_stack_limit</text></g><g><title>pthread_getattr_np (600 samples, 2.03%)</title><rect x="95.6081%" y="341" width="2.0270%" height="15" fill="rgb(223,139,8)" fg:x="28300" fg:w="600"/><text x="95.6185%" y="351.50">pthread_getattr_np</text></g><g><title>__GI___isoc99_sscanf (500 samples, 1.69%)</title><rect x="95.9459%" y="325" width="1.6892%" height="15" fill="rgb(232,213,38)" fg:x="28400" fg:w="500"/><text x="95.9564%" y="335.50">__GI___isoc99_sscanf</text></g><g><title>__vfscanf_internal (500 samples, 1.69%)</title><rect x="95.9459%" y="309" width="1.6892%" height="15" fill="rgb(207,94,22)" fg:x="28400" fg:w="500"/><text x="95.9564%" y="319.50">__vfscanf_internal</text></g><g><title>_pthread_cleanup_pop_restore (100 samples, 0.34%)</title><rect x="97.2973%" y="293" width="0.3378%" height="15" fill="rgb(219,183,54)" fg:x="28800" fg:w="100"/><text x="97.3077%" y="303.50">_pthread_cl..</text></g><g><title>std::thread::available_parallelism (100 samples, 0.34%)</title><rect x="97.6351%" y="421" width="0.3378%" height="15" fill="rgb(216,185,54)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="431.50">std::thread..</text></g><g><title>std::sys::pal::unix::thread::available_parallelism (100 samples, 0.34%)</title><rect x="97.6351%" y="405" width="0.3378%" height="15" fill="rgb(254,217,39)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="415.50">std::sys::p..</text></g><g><title>std::sys::pal::unix::thread::cgroups::quota (100 samples, 0.34%)</title><rect x="97.6351%" y="389" width="0.3378%" height="15" fill="rgb(240,178,23)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="399.50">std::sys::p..</text></g><g><title>std::sys::pal::unix::thread::cgroups::quota_v2 (100 samples, 0.34%)</title><rect x="97.6351%" y="373" width="0.3378%" height="15" fill="rgb(218,11,47)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="383.50">std::sys::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (100 samples, 0.34%)</title><rect x="97.6351%" y="357" width="0.3378%" height="15" fill="rgb(218,51,51)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="367.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (100 samples, 0.34%)</title><rect x="97.6351%" y="341" width="0.3378%" height="15" fill="rgb(238,126,27)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="351.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (100 samples, 0.34%)</title><rect x="97.6351%" y="325" width="0.3378%" height="15" fill="rgb(249,202,22)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="335.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="97.6351%" y="309" width="0.3378%" height="15" fill="rgb(254,195,49)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="319.50">&lt;alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (100 samples, 0.34%)</title><rect x="97.6351%" y="293" width="0.3378%" height="15" fill="rgb(208,123,14)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="303.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (100 samples, 0.34%)</title><rect x="97.6351%" y="277" width="0.3378%" height="15" fill="rgb(224,200,8)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="287.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (100 samples, 0.34%)</title><rect x="97.6351%" y="261" width="0.3378%" height="15" fill="rgb(217,61,36)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="271.50">alloc::allo..</text></g><g><title>__rustc::__rdl_dealloc (100 samples, 0.34%)</title><rect x="97.6351%" y="245" width="0.3378%" height="15" fill="rgb(206,35,45)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="255.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (100 samples, 0.34%)</title><rect x="97.6351%" y="229" width="0.3378%" height="15" fill="rgb(217,65,33)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="239.50">std::sys::a..</text></g><g><title>__GI___libc_free (100 samples, 0.34%)</title><rect x="97.6351%" y="213" width="0.3378%" height="15" fill="rgb(222,158,48)" fg:x="28900" fg:w="100"/><text x="97.6456%" y="223.50">__GI___libc..</text></g><g><title>trie_rs::map::trie::&lt;impl trie_rs::map::Trie&lt;Label,Value&gt;&gt;::bin_search_by_children_labels::{{closure}} (100 samples, 0.34%)</title><rect x="97.9730%" y="421" width="0.3378%" height="15" fill="rgb(254,2,54)" fg:x="29000" fg:w="100"/><text x="97.9834%" y="431.50">trie_rs::ma..</text></g><g><title>trie_rs::map::trie::&lt;impl trie_rs::map::Trie&lt;Label,Value&gt;&gt;::label (100 samples, 0.34%)</title><rect x="97.9730%" y="405" width="0.3378%" height="15" fill="rgb(250,143,38)" fg:x="29000" fg:w="100"/><text x="97.9834%" y="415.50">trie_rs::ma..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;flare_internals::passes::midend::environment::SimpleQuant&gt;&gt; (100 samples, 0.34%)</title><rect x="98.3108%" y="405" width="0.3378%" height="15" fill="rgb(248,25,0)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="415.50">core::ptr::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="98.3108%" y="389" width="0.3378%" height="15" fill="rgb(206,152,27)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="399.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;[flare_internals::passes::midend::environment::SimpleQuant]&gt; (100 samples, 0.34%)</title><rect x="98.3108%" y="373" width="0.3378%" height="15" fill="rgb(240,77,30)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="383.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;flare_internals::passes::midend::environment::SimpleQuant&gt; (100 samples, 0.34%)</title><rect x="98.3108%" y="357" width="0.3378%" height="15" fill="rgb(231,5,3)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="367.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (100 samples, 0.34%)</title><rect x="98.3108%" y="341" width="0.3378%" height="15" fill="rgb(207,226,32)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="351.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (100 samples, 0.34%)</title><rect x="98.3108%" y="325" width="0.3378%" height="15" fill="rgb(222,207,47)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="335.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (100 samples, 0.34%)</title><rect x="98.3108%" y="309" width="0.3378%" height="15" fill="rgb(229,115,45)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="319.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="98.3108%" y="293" width="0.3378%" height="15" fill="rgb(224,191,6)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="303.50">&lt;alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (100 samples, 0.34%)</title><rect x="98.3108%" y="277" width="0.3378%" height="15" fill="rgb(230,227,24)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="287.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (100 samples, 0.34%)</title><rect x="98.3108%" y="261" width="0.3378%" height="15" fill="rgb(228,80,19)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="271.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (100 samples, 0.34%)</title><rect x="98.3108%" y="245" width="0.3378%" height="15" fill="rgb(247,229,0)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="255.50">alloc::allo..</text></g><g><title>__rustc::__rdl_dealloc (100 samples, 0.34%)</title><rect x="98.3108%" y="229" width="0.3378%" height="15" fill="rgb(237,194,15)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="239.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (100 samples, 0.34%)</title><rect x="98.3108%" y="213" width="0.3378%" height="15" fill="rgb(219,203,20)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="223.50">std::sys::a..</text></g><g><title>_int_free (100 samples, 0.34%)</title><rect x="98.3108%" y="197" width="0.3378%" height="15" fill="rgb(234,128,8)" fg:x="29100" fg:w="100"/><text x="98.3212%" y="207.50">_int_free</text></g><g><title>trie_rs::iter::postfix_iter::PostfixIter&lt;Label,Value,C,M&gt;::new (100 samples, 0.34%)</title><rect x="98.6486%" y="405" width="0.3378%" height="15" fill="rgb(248,202,8)" fg:x="29200" fg:w="100"/><text x="98.6591%" y="415.50">trie_rs::it..</text></g><g><title>trie_rs::map::trie::&lt;impl trie_rs::map::Trie&lt;Label,Value&gt;&gt;::postfix_search (300 samples, 1.01%)</title><rect x="98.3108%" y="421" width="1.0135%" height="15" fill="rgb(206,104,37)" fg:x="29100" fg:w="300"/><text x="98.3212%" y="431.50">trie_rs::map::trie::&lt;impl trie_rs::map:..</text></g><g><title>trie_rs::map::trie::&lt;impl trie_rs::map::Trie&lt;Label,Value&gt;&gt;::bin_search_by_children_labels (100 samples, 0.34%)</title><rect x="98.9865%" y="405" width="0.3378%" height="15" fill="rgb(223,8,27)" fg:x="29300" fg:w="100"/><text x="98.9969%" y="415.50">trie_rs::ma..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (100 samples, 0.34%)</title><rect x="98.9865%" y="389" width="0.3378%" height="15" fill="rgb(216,217,28)" fg:x="29300" fg:w="100"/><text x="98.9969%" y="399.50">core::slice..</text></g><g><title>trie_rs::map::trie::&lt;impl trie_rs::map::Trie&lt;Label,Value&gt;&gt;::bin_search_by_children_labels::{{closure}} (100 samples, 0.34%)</title><rect x="98.9865%" y="373" width="0.3378%" height="15" fill="rgb(249,199,1)" fg:x="29300" fg:w="100"/><text x="98.9969%" y="383.50">trie_rs::ma..</text></g><g><title>&lt;flare_internals::passes::midend::environment::SimpleQuant as core::cmp::Ord&gt;::cmp (100 samples, 0.34%)</title><rect x="98.9865%" y="357" width="0.3378%" height="15" fill="rgb(240,85,17)" fg:x="29300" fg:w="100"/><text x="98.9969%" y="367.50">&lt;flare_inte..</text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (100 samples, 0.34%)</title><rect x="98.9865%" y="341" width="0.3378%" height="15" fill="rgb(206,108,45)" fg:x="29300" fg:w="100"/><text x="98.9969%" y="351.50">&lt;alloc::str..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (100 samples, 0.34%)</title><rect x="98.9865%" y="325" width="0.3378%" height="15" fill="rgb(245,210,41)" fg:x="29300" fg:w="100"/><text x="98.9969%" y="335.50">&lt;alloc::vec..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (100 samples, 0.34%)</title><rect x="98.9865%" y="309" width="0.3378%" height="15" fill="rgb(206,13,37)" fg:x="29300" fg:w="100"/><text x="98.9969%" y="319.50">core::slice..</text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (100 samples, 0.34%)</title><rect x="98.9865%" y="293" width="0.3378%" height="15" fill="rgb(250,61,18)" fg:x="29300" fg:w="100"/><text x="98.9969%" y="303.50">&lt;A as core:..</text></g><g><title>__memcmp_avx2_movbe (100 samples, 0.34%)</title><rect x="98.9865%" y="277" width="0.3378%" height="15" fill="rgb(235,172,48)" fg:x="29300" fg:w="100"/><text x="98.9969%" y="287.50">__memcmp_av..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (100 samples, 0.34%)</title><rect x="99.3243%" y="389" width="0.3378%" height="15" fill="rgb(249,201,17)" fg:x="29400" fg:w="100"/><text x="99.3347%" y="399.50">alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert_mut (100 samples, 0.34%)</title><rect x="99.3243%" y="373" width="0.3378%" height="15" fill="rgb(219,208,6)" fg:x="29400" fg:w="100"/><text x="99.3347%" y="383.50">alloc::vec:..</text></g><g><title>core::ptr::copy (100 samples, 0.34%)</title><rect x="99.3243%" y="357" width="0.3378%" height="15" fill="rgb(248,31,23)" fg:x="29400" fg:w="100"/><text x="99.3347%" y="367.50">core::ptr::..</text></g><g><title>__memmove_avx_unaligned_erms (100 samples, 0.34%)</title><rect x="99.3243%" y="341" width="0.3378%" height="15" fill="rgb(245,15,42)" fg:x="29400" fg:w="100"/><text x="99.3347%" y="351.50">__memmove_a..</text></g><g><title>all (29,600 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(222,217,39)" fg:x="0" fg:w="29600"/><text x="0.0104%" y="463.50"></text></g><g><title>flarec (29,600 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(210,219,27)" fg:x="0" fg:w="29600"/><text x="0.0104%" y="447.50">flarec</text></g><g><title>trie_rs::map::trie_builder::&lt;impl trie_rs::map::TrieBuilder&lt;Label,Value&gt;&gt;::insert (200 samples, 0.68%)</title><rect x="99.3243%" y="421" width="0.6757%" height="15" fill="rgb(252,166,36)" fg:x="29400" fg:w="200"/><text x="99.3347%" y="431.50">trie_rs::map::trie_builde..</text></g><g><title>trie_rs::internal_data_structure::naive_trie::naive_trie_impl::&lt;impl trie_rs::internal_data_structure::naive_trie::NaiveTrie&lt;Label,Value&gt;&gt;::push (200 samples, 0.68%)</title><rect x="99.3243%" y="405" width="0.6757%" height="15" fill="rgb(245,132,34)" fg:x="29400" fg:w="200"/><text x="99.3347%" y="415.50">trie_rs::internal_data_st..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;flare_internals::passes::midend::environment::SimpleQuant&gt;&gt; (100 samples, 0.34%)</title><rect x="99.6622%" y="389" width="0.3378%" height="15" fill="rgb(236,54,3)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="399.50">core::ptr::..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="99.6622%" y="373" width="0.3378%" height="15" fill="rgb(241,173,43)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="383.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;flare_internals::passes::midend::environment::SimpleQuant,alloc::alloc::Global&gt;&gt; (100 samples, 0.34%)</title><rect x="99.6622%" y="357" width="0.3378%" height="15" fill="rgb(215,190,9)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="367.50">core::ptr::..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="99.6622%" y="341" width="0.3378%" height="15" fill="rgb(242,101,16)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="351.50">&lt;&lt;alloc::ve..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;flare_internals::passes::midend::environment::SimpleQuant&gt;&gt; (100 samples, 0.34%)</title><rect x="99.6622%" y="325" width="0.3378%" height="15" fill="rgb(223,190,21)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="335.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.34%)</title><rect x="99.6622%" y="309" width="0.3378%" height="15" fill="rgb(215,228,25)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="319.50">&lt;alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (100 samples, 0.34%)</title><rect x="99.6622%" y="293" width="0.3378%" height="15" fill="rgb(225,36,22)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="303.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (100 samples, 0.34%)</title><rect x="99.6622%" y="277" width="0.3378%" height="15" fill="rgb(251,106,46)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="287.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (100 samples, 0.34%)</title><rect x="99.6622%" y="261" width="0.3378%" height="15" fill="rgb(208,90,1)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="271.50">alloc::allo..</text></g><g><title>__rustc::__rdl_dealloc (100 samples, 0.34%)</title><rect x="99.6622%" y="245" width="0.3378%" height="15" fill="rgb(243,10,4)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="255.50">__rustc::__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (100 samples, 0.34%)</title><rect x="99.6622%" y="229" width="0.3378%" height="15" fill="rgb(212,137,27)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="239.50">std::sys::a..</text></g><g><title>_int_free (100 samples, 0.34%)</title><rect x="99.6622%" y="213" width="0.3378%" height="15" fill="rgb(231,220,49)" fg:x="29500" fg:w="100"/><text x="99.6726%" y="223.50">_int_free</text></g></svg></svg>