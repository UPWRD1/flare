--with IO
--with Env
--with Iter

with "examples/slice"
with "examples/result"

struct Config = 
    query: str,
    file_path: str,
    ignore_case: bool


def Config
    in build: (args: Slice[String]) -> Result[Config, str] =
        Ok(Config {query: args.get(1)?, file_path: args.get(2)?, ignore_case: args.contains("-i")})

    in search: (query: str, contents: str) -> Slice[str] =
	contents.lines().filter(fn (line) = line.contains(query))

    in search_case_insensitive: (self, query: str, contents: str) -> Slice[str] =
	q = query.to_lowercase()
	contents.lines().filter(fn of line -> line.to_lowercase().contains(q))

    in run: (self) -> str =
	contents = self.file_path.unwrap()
	if self.ignore_case then 
	    search_case_insensitive(self.query, contents) 
	else 
	    search(self.query, contents)

let main: () -> unit do IO =
	args = Slice.new_from({"Hello"})
	config = Config.build(args) & unwrap_else(fn (e) = IO.quit("Problem parsing arguments: " ^ e, 1))
	if config.run() is Err(e) then IO.quit("Application error: " + e, 1) else IO.exit(0)
	
