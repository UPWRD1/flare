with "examples/result"

type Slice[?T] = struct of
	start: ^?T,
	len: int,
	cap: int

def Slice[?T]
    in len: (self) -> int =
        self.len

    in new: (x: ?T) -> Slice[?T] = 
        Slice {start: %x, len: 1, cap: 32}

    in get: (self, idx: int) -> ?T =
        if idx <= self.len then
            return idx * self.start
        else 
            return -1

    in containshelper: (self, e: ?T, c: int) -> bool =
        if c < s.len() then
            if s.get(c).unwrap() == e then 
                return true 
            else 
                return self.containshelper(s, e, c + 1)
        else 
            return false

    in contains: (self, item: ?T) -> bool =
        containshelper(self, item, 0)
